{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"/Users/ilya/Documents/GitHub/Ildorado-2019Q1/piskel-clone/src/screens/index.js\",\"/Users/ilya/Documents/GitHub/Ildorado-2019Q1/piskel-clone/src/export/tranform to gif code/GIFEncoder.js\",\"/Users/ilya/Documents/GitHub/Ildorado-2019Q1/piskel-clone/src/export/tranform to gif code/LZWEncoder.js\",\"/Users/ilya/Documents/GitHub/Ildorado-2019Q1/piskel-clone/src/export/tranform to gif code/NeuQuant.js\",\"/Users/ilya/Documents/GitHub/Ildorado-2019Q1/piskel-clone/src/screens/utilities.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"__webpack_exports__\",\"canvas\",\"document\",\"getElementById\",\"mainColor\",\"querySelector\",\"ctx\",\"getContext\",\"canvasBackgroundColor\",\"fillStyle\",\"fillRect\",\"width\",\"height\",\"mainFrames\",\"AddNewFrameButton\",\"frames\",\"currentFrame\",\"fromStorage\",\"JSON\",\"parse\",\"localStorage\",\"getItem\",\"stateObject\",\"takePicture\",\"dataURL\",\"toDataURL\",\"img\",\"Image\",\"src\",\"push\",\"children\",\"style\",\"backgroundImage\",\"loadFrame\",\"numberOfFrame\",\"loadingFrame\",\"clearRect\",\"drawImage\",\"addNewFrame\",\"coppied\",\"cloneNode\",\"classList\",\"contains\",\"remove\",\"innerText\",\"Number\",\"length\",\"insertBefore\",\"duplicateFrame\",\"numberOfDuplicatedFrame\",\"querySelectorAll\",\"deleteFrame\",\"numberOfDeletedFrame\",\"splice\",\"addEventListener\",\"event\",\"target\",\"parentElement\",\"FPS\",\"interval\",\"showAnimation\",\"counter\",\"goThroughFrames\",\"passedFrames\",\"passedDelta\",\"innerHTML\",\"add\",\"appendChild\",\"areArraysEqual\",\"animateEvent\",\"newFrames\",\"slice\",\"delta\",\"clearInterval\",\"window\",\"setInterval\",\"FullscreenButton\",\"requestFullscreen\",\"penSizeContainer\",\"currentPenSize\",\"selectedPenSizeElement\",\"attributes\",\"toolPicker\",\"arrayOfEventListeners\",\"timeout\",\"started\",\"x\",\"y\",\"ratio\",\"clientWidth\",\"getCoordinates\",\"offsetX\",\"offsetY\",\"penStart\",\"penMove\",\"drawLine\",\"penEnd\",\"context\",\"x1\",\"y1\",\"x2\",\"y2\",\"beginPath\",\"strokeStyle\",\"lineWidth\",\"moveTo\",\"lineTo\",\"stroke\",\"closePath\",\"PenEvent\",\"fillAllPixelsEvent\",\"eraserStart\",\"eraserMove\",\"cleanCircle\",\"eraserEnd\",\"eraserEvent\",\"strokeStart\",\"strokeEnd\",\"strokeEvent\",\"rectangleStart\",\"rectangleEnd\",\"strokeRect\",\"parseInt\",\"drawRectangle\",\"filledRectangleEnd\",\"drawFilledRectangle\",\"rectangleEvent\",\"filledRectangleEvent\",\"circleStart\",\"circleEnd\",\"temporary\",\"arc\",\"Math\",\"PI\",\"drawCircle\",\"filledCircleEnd\",\"fill\",\"drawFilledCircle\",\"circleEvent\",\"filledCircleEvent\",\"halfCircleEnd\",\"clockWise\",\"radius\",\"abs\",\"tVar\",\"sqrt\",\"kVar\",\"alpha\",\"acos\",\"drawHalfCircle\",\"halfCircleEvent\",\"clearEvent\",\"drawSpray\",\"offX\",\"getRandomInt\",\"offY\",\"sprayStart\",\"lineCap\",\"lineJoin\",\"sprayMove\",\"sprayEnd\",\"sprayEvent\",\"forEach\",\"element\",\"removeEventListener\",\"canvasSizeContainer\",\"currentCanvasSize\",\"selectedCanvasSizeElement\",\"changeCanvasSize\",\"newCanvasSize\",\"frameToReturn\",\"loadedFrame\",\"ResizeFrames\",\"onresize\",\"imgs\",\"el\",\"penSize\",\"String\",\"removeItem\",\"setItem\",\"stringify\",\"coords\",\"downloadButton\",\"encoder\",\"GIFEncoder\",\"setRepeat\",\"setDelay\",\"start\",\"fakeCanvas\",\"createElement\",\"fakeContext\",\"addFrame\",\"finish\",\"download\",\"onkeyup\",\"e\",\"code\",\"shiftKey\",\"click\",\"ctrlKey\",\"chr\",\"fromCharCode\",\"ByteArray\",\"this\",\"bin\",\"getData\",\"v\",\"writeByte\",\"val\",\"writeUTFBytes\",\"string\",\"charCodeAt\",\"writeBytes\",\"array\",\"offset\",\"transIndex\",\"out\",\"image\",\"pixels\",\"indexedPixels\",\"colorDepth\",\"colorTab\",\"transparent\",\"repeat\",\"delay\",\"usedEntry\",\"palSize\",\"dispose\",\"closeStream\",\"firstFrame\",\"sizeSet\",\"sample\",\"comment\",\"reset\",\"ms\",\"round\",\"setDispose\",\"iter\",\"setTransparent\",\"setComment\",\"im\",\"is_imageData\",\"Error\",\"ok\",\"ImageData\",\"data\",\"sizeset\",\"setSize\",\"Uint8ClampedArray\",\"console\",\"log\",\"getImageData\",\"getImagePixels\",\"analyzePixels\",\"writeLSD\",\"writePalette\",\"writeNetscapeExt\",\"writeGraphicCtrlExt\",\"writeCommentExt\",\"writeImageDesc\",\"writePixels\",\"filename\",\"undefined\",\"endsWith\",\"templink\",\"href\",\"URL\",\"createObjectURL\",\"Blob\",\"Uint8Array\",\"type\",\"setFrameRate\",\"fps\",\"setQuality\",\"quality\",\"w\",\"h\",\"cont\",\"len\",\"nPix\",\"nq\",\"NeuQuant\",\"process\",\"k\",\"j\",\"index\",\"map\",\"findClosest\",\"g\",\"b\",\"minpos\",\"dmin\",\"dr\",\"dg\",\"db\",\"count\",\"transp\",\"disp\",\"WriteShort\",\"pValue\",\"LZWEncoder\",\"encode\",\"stream\",\"setProperties\",\"has_start\",\"is_first\",\"imgW\",\"imgH\",\"pixAry\",\"initCodeSize\",\"remaining\",\"curPixel\",\"n_bits\",\"maxcode\",\"g_init_bits\",\"ClearCode\",\"EOFCode\",\"a_count\",\"htab\",\"codetab\",\"free_ent\",\"clear_flg\",\"cur_accum\",\"cur_bits\",\"masks\",\"accum\",\"color_depth\",\"max\",\"char_out\",\"outs\",\"flush_char\",\"cl_block\",\"cl_hash\",\"output\",\"hsize\",\"compress\",\"init_bits\",\"fcode\",\"ent\",\"hshift\",\"MAXCODE\",\"nextPixel\",\"outer_loop\",\"os\",\"apply\",\"arguments\",\"alphadec\",\"thepicture\",\"lengthcount\",\"samplefac\",\"network\",\"netindex\",\"bias\",\"freq\",\"radpower\",\"thepic\",\"Array\",\"intbias\",\"unbiasnet\",\"dist\",\"a\",\"bestd\",\"best\",\"rad\",\"step\",\"samplepixels\",\"pix\",\"lim\",\"contest\",\"altersingle\",\"alterneigh\",\"learn\",\"smallpos\",\"smallval\",\"q\",\"previouscol\",\"startpos\",\"inxbuild\",\"colorMap\",\"lo\",\"hi\",\"biasdist\",\"betafreq\",\"bestpos\",\"bestbiaspos\",\"bestbiasd\",\"arr1\",\"arr2\",\"min\",\"floor\",\"random\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 2);\\n\",\"/* eslint-disable no-undef */\\n/* eslint-disable no-use-before-define */\\n/* eslint-disable eqeqeq */\\n/* eslint-disable no-param-reassign */\\n/* eslint-disable prefer-destructuring */\\nimport '../../reset.css';\\nimport './index.css';\\nimport { } from '../export/tranform to gif code/GIFEncoder';\\nimport { } from '../export/tranform to gif code/LZWEncoder';\\nimport { } from '../export/tranform to gif code/NeuQuant';\\nimport { } from '../export/tranform to gif code/b64';\\nimport './utilities';\\n\\n// const utilities = require('./utilities');\\n\\nconst canvas = document.getElementById('canvas');\\nconst mainColor = document.querySelector('.mainColor');\\n// const secondColor = document.querySelector('.secondColor');\\nconst ctx = canvas.getContext('2d');\\nconst canvasBackgroundColor = 'lightgray';\\nctx.fillStyle = canvasBackgroundColor;\\nctx.fillRect(0, 0, canvas.width, canvas.height);\\nconst mainFrames = document.querySelector('.main__frames');\\nconst AddNewFrameButton = document.querySelector('.addNewFrame');\\nconst frames = [];\\nlet currentFrame = 1;\\nconst fromStorage = JSON.parse(localStorage.getItem('stateObject'));\\nconst stateObject = {};\\n// const [areArraysEqual, getRandomInt] = [areArraysEqual, getRandomInt];\\n// TAKE IMAGE IMPLEMENTATION\\nfunction takePicture() {\\n  const dataURL = canvas.toDataURL();\\n  const img = new Image();\\n  img.src = dataURL;\\n  if (frames[currentFrame - 1]) {\\n    frames[currentFrame - 1] = img;\\n  } else {\\n    frames.push(img);\\n  }\\n  mainFrames.children[currentFrame - 1].style.backgroundImage = `url(${dataURL})`;\\n}\\n// TAKE IMAGE IMPLEMENTATION END\\n// LOAD FRAME IMPLEMENTATION\\nfunction loadFrame(numberOfFrame) {\\n  takePicture();\\n  const loadingFrame = frames[numberOfFrame - 1];\\n  currentFrame = numberOfFrame;\\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\\n  ctx.drawImage(loadingFrame, 0, 0);\\n}\\n// LOAD FRAME IMPLEMENTATION END\\n// ADD NEW FRAME FRAME IMPLEMENTATION\\nfunction addNewFrame() {\\n  takePicture();\\n  const coppied = document.querySelector('.frame').cloneNode(true);\\n  if (coppied.classList.contains('firstFrame')) {\\n    coppied.classList.remove('firstFrame');\\n  }\\n  const numberOfFrame = coppied.children[0];\\n  numberOfFrame.innerText = Number(mainFrames.children[mainFrames.children.length - 2]\\n    .children[0].innerText) + 1;\\n  mainFrames.insertBefore(coppied, mainFrames.children[mainFrames.children.length - 1]);\\n  currentFrame = mainFrames.children.length - 1;\\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\\n  ctx.fillStyle = canvasBackgroundColor;\\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\\n  loadFrame(currentFrame);\\n}\\nAddNewFrameButton.addEventListener('click', addNewFrame);\\n// ADD NEW FRAME FRAME IMPLEMENTATION END\\n// DUPLICATE FRAME IMPLEMENTATION\\nfunction duplicateFrame(numberOfDuplicatedFrame) {\\n  const coppied = document.querySelectorAll('.frame')[numberOfDuplicatedFrame - 1].cloneNode(true);\\n  if (coppied.classList.contains('firstFrame')) {\\n    coppied.classList.remove('firstFrame');\\n  }\\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\\n  coppied.children[0].innerText = mainFrames.children.length;\\n  mainFrames.insertBefore(coppied, mainFrames.children[mainFrames.children.length - 1]);\\n  currentFrame = mainFrames.children.length - 1;\\n\\n  ctx.drawImage(frames[numberOfDuplicatedFrame - 1], 0, 0);\\n  takePicture();\\n}\\n// DUPLICATE FRAME IMPLEMENTATION END\\n// DELETE FRAME IMPLEMENTATION\\nfunction deleteFrame(numberOfDeletedFrame) {\\n  if (mainFrames.children.length > 2) {\\n    if (numberOfDeletedFrame === currentFrame) {\\n      if (frames.length === currentFrame) {\\n        loadFrame(currentFrame - 1);\\n      } else if (frames.length > currentFrame) {\\n        loadFrame(currentFrame + 1);\\n        currentFrame -= 1;\\n      }\\n    } else if (numberOfDeletedFrame < currentFrame) {\\n      currentFrame -= 1;\\n    }\\n    mainFrames.children[numberOfDeletedFrame - 1].remove();\\n    frames.splice(numberOfDeletedFrame - 1, 1);\\n    for (let i = 0; i < mainFrames.children.length - 1; i += 1) {\\n      if (mainFrames.children[i].classList.contains('frame')) {\\n        mainFrames.children[i].children[0].innerText = i + 1;\\n      }\\n    }\\n  }\\n}\\n// DELETE FRAME IMPLEMENTATION END\\n// LOAD FRAME FROM CLICK FRAME IMPLEMENTATION\\nfunction frameLoadEvent(event) {\\n  if (event.target.classList.contains('numberOfFrame')) {\\n    loadFrame(Number(event.target.innerText));\\n  } else if (event.target.classList.contains('frame')) {\\n    loadFrame(Number(event.target.children[0].innerText));\\n  } else if (event.target.classList.contains('duplicateIcon')) {\\n    duplicateFrame(event.target.parentElement.children[0].innerText);\\n  } else if (event.target.classList.contains('deleteIcon')) {\\n    deleteFrame(event.target.parentElement.children[0].innerText);\\n  }\\n}\\nmainFrames.addEventListener('click', frameLoadEvent);\\n// LOAD FRAME FROM CLICK FRAME IMPLEMENTATION END\\n// take first picture to add first frame to array\\ntakePicture();\\n// CREATE ANIMATION IMPLEMENTATION\\nconst FPS = document.querySelector('.FPS');\\nlet interval = null;\\nconst showAnimation = document.querySelector('.showAnimation');\\nlet counter = 0;\\nfunction goThroughFrames(passedFrames, passedDelta) {\\n  showAnimation.innerHTML = '';\\n  if (!passedFrames[counter].classList.contains('AnimationImg')) {\\n    passedFrames[counter].classList.add('AnimationImg');\\n  }\\n  showAnimation.appendChild(passedFrames[counter]);\\n  if (counter === passedFrames.length - 1) {\\n    if (!areArraysEqual(passedFrames, frames) || passedDelta !== FPS.value) {\\n      counter = 0;\\n      animateEvent();\\n    } else {\\n      counter = 0;\\n    }\\n  } else {\\n    counter += 1;\\n  }\\n}\\nfunction animateEvent() {\\n  const newFrames = frames.slice();\\n  let delta = FPS.value;\\n  if (delta < 1) {\\n    delta = 1;\\n  } else if (delta > 24) { delta = 24; }\\n  clearInterval(interval);\\n  interval = window.setInterval(goThroughFrames, 1000 / delta, newFrames, delta);\\n}\\nanimateEvent();\\n// CREATE ANIMATION IMPLEMENTATION END\\n// FULLS SCREEN IMPLEMENTATION\\nfunction fullScreenEvent() {\\n  if (showAnimation.innerHTML !== '') {\\n    showAnimation.requestFullscreen();\\n  }\\n}\\nconst FullscreenButton = document.querySelector('.FullscreenButton');\\nFullscreenButton.addEventListener('click', fullScreenEvent);\\n// CREATE ANIMATION IMPLEMENTATION END\\n// PEN SIZE IMPLEMENTATION\\nconst penSizeContainer = document.querySelector('.size-picker-container');\\nlet currentPenSize = 1;\\nlet selectedPenSizeElement = penSizeContainer.children[0];\\nfunction PenSizeEvent(event) {\\n  if (event.target.parentElement === penSizeContainer) {\\n    currentPenSize = event.target.attributes[1].value;\\n    selectedPenSizeElement.classList.remove('selected');\\n    selectedPenSizeElement = event.target;\\n    selectedPenSizeElement.classList.add('selected');\\n  }\\n}\\npenSizeContainer.addEventListener('click', PenSizeEvent);\\n// PEN SIZE IMPLEMENTATION END\\nconst toolPicker = document.querySelector('.main__pallete__tool-picker');\\nconst arrayOfEventListeners = [];\\n// REMOVE EVENT LISTENERS FROM CANVAS IMPLEMENTATION\\nfunction removeEventListenersFromCanvas() {\\n  arrayOfEventListeners.forEach((element) => {\\n    canvas.removeEventListener(element[0], element[1]);\\n  });\\n}\\n// REMOVE EVENT LISTENERS FROM CANVAS IMPLEMENTATION END\\nlet started = false;\\nlet x = 0;\\nlet y = 0;\\nlet ratio = canvas.clientWidth / canvas.width;\\n// PEN IMPLEMENTATION\\nfunction getCoordinates(event) {\\n  x = event.offsetX;\\n  y = event.offsetY;\\n}\\nfunction penStart(event) {\\n  getCoordinates(event);\\n  started = true;\\n}\\nfunction penMove(event) {\\n  if (started === true) {\\n    drawLine(ctx, x, y, event.offsetX, event.offsetY);\\n    getCoordinates(event);\\n  }\\n}\\nfunction penEnd(event) {\\n  if (started === true) {\\n    drawLine(ctx, x, y, event.offsetX, event.offsetY);\\n    x = 0;\\n    y = 0;\\n    started = false;\\n  }\\n}\\nfunction drawLine(context, x1, y1, x2, y2) {\\n  context.beginPath();\\n  context.strokeStyle = mainColor.value;\\n  context.lineWidth = currentPenSize;\\n  context.moveTo(x1 / ratio, y1 / ratio);\\n  context.lineTo(x2 / ratio, y2 / ratio);\\n  context.stroke();\\n  context.closePath();\\n}\\nfunction PenEvent() {\\n  canvas.addEventListener('mousedown', penStart);\\n  canvas.addEventListener('mousemove', penMove);\\n  canvas.addEventListener('mouseup', penEnd);\\n  arrayOfEventListeners.push(['mousedown', penStart]);\\n  arrayOfEventListeners.push(['mousemove', penMove]);\\n  arrayOfEventListeners.push(['mouseup', penEnd]);\\n}\\n// PEN IMPLEMENTATION END\\n// FILL ALL PIXELS IMPLEMENTATION\\nfunction fillAllPixelsEvent() {\\n  ctx.fillStyle = mainColor.value;\\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\\n}\\n// FILL ALL PIXELS IMPLEMENTATION END\\n// ERASER IMPLEMENTATION\\nfunction eraserStart(event) {\\n  getCoordinates(event);\\n  started = true;\\n}\\nfunction eraserMove(event) {\\n  if (started === true) {\\n    cleanCircle(ctx, x, y, event.offsetX, event.offsetY);\\n    getCoordinates(event);\\n  }\\n}\\nfunction eraserEnd(event) {\\n  if (started === true) {\\n    cleanCircle(ctx, x, y, event.offsetX, event.offsetY);\\n    x = 0;\\n    y = 0;\\n    started = false;\\n  }\\n}\\nfunction cleanCircle(context, x1, y1, x2, y2) {\\n  context.beginPath();\\n  context.strokeStyle = canvasBackgroundColor;\\n  context.lineWidth = currentPenSize * 10;\\n  context.moveTo(x1 / ratio, y1 / ratio);\\n  context.lineTo(x2 / ratio, y2 / ratio);\\n  context.stroke();\\n  context.closePath();\\n}\\nfunction eraserEvent() {\\n  canvas.addEventListener('mousedown', eraserStart);\\n  canvas.addEventListener('mousemove', eraserMove);\\n  canvas.addEventListener('mouseup', eraserEnd);\\n  arrayOfEventListeners.push(['mousedown', eraserStart]);\\n  arrayOfEventListeners.push(['mousemove', eraserMove]);\\n  arrayOfEventListeners.push(['mouseup', eraserEnd]);\\n}\\n// ERASER IMPLEMENTATION END\\n// STROKE IMPLEMENTATION\\nfunction strokeStart(event) {\\n  getCoordinates(event);\\n  started = true;\\n}\\nfunction strokeEnd(event) {\\n  if (started === true) {\\n    drawLine(ctx, x, y, event.offsetX, event.offsetY);\\n    started = false;\\n  }\\n}\\nfunction strokeEvent() {\\n  canvas.addEventListener('mousedown', strokeStart);\\n  canvas.addEventListener('mouseup', strokeEnd);\\n  arrayOfEventListeners.push(['mousedown', strokeStart]);\\n  arrayOfEventListeners.push(['mouseup', strokeEnd]);\\n}\\n// STROKE IMPLEMENTATION END\\n// RECTANGLE AND FILLED RECTANGLE IMPLEMENTATION\\nfunction rectangleStart(event) {\\n  getCoordinates(event);\\n  started = true;\\n}\\nfunction rectangleEnd(event) {\\n  if (started === true) {\\n    drawRectangle(ctx, x, y, event.offsetX, event.offsetY);\\n    started = false;\\n  }\\n}\\nfunction filledRectangleEnd(event) {\\n  if (started === true) {\\n    drawFilledRectangle(ctx, x, y, event.offsetX, event.offsetY);\\n    started = false;\\n  }\\n}\\nfunction drawRectangle(context, x1, y1, x2, y2) {\\n  const width = x2 - x1;\\n  const height = y2 - y1;\\n  context.beginPath();\\n  context.strokeStyle = mainColor.value;\\n  context.lineWidth = currentPenSize;\\n  context.strokeRect(parseInt(x1 / ratio, 10), parseInt(y1 / ratio, 10),\\n    parseInt(width / ratio, 10), parseInt(height / ratio, 10));\\n  context.closePath();\\n}\\nfunction drawFilledRectangle(context, x1, y1, x2, y2) {\\n  const width = x2 - x1;\\n  const height = y2 - y1;\\n  context.fillStyle = mainColor.value;\\n  context.fillRect(parseInt(x1 / ratio, 10), parseInt(y1 / ratio, 10),\\n    parseInt(width / ratio, 10), parseInt(height / ratio, 10));\\n}\\nfunction rectangleEvent() {\\n  canvas.addEventListener('mousedown', rectangleStart);\\n  canvas.addEventListener('mouseup', rectangleEnd);\\n  arrayOfEventListeners.push(['mousedown', rectangleStart]);\\n  arrayOfEventListeners.push(['mouseup', rectangleEnd]);\\n}\\nfunction filledRectangleEvent() {\\n  canvas.addEventListener('mousedown', rectangleStart);\\n  canvas.addEventListener('mouseup', filledRectangleEnd);\\n  arrayOfEventListeners.push(['mousedown', rectangleStart]);\\n  arrayOfEventListeners.push(['mouseup', filledRectangleEnd]);\\n}\\n// RECTANGLE AND FILLED RECTANGLE IMPLEMENTATION END\\n// CIRCLE AND FILLED CIRCLE IMPLEMENTATION\\nfunction circleStart(event) {\\n  getCoordinates(event);\\n  started = true;\\n}\\nfunction circleEnd(event) {\\n  if (started === true) {\\n    drawCircle(ctx, x, y, event.offsetX, event.offsetY);\\n    started = false;\\n  }\\n}\\nfunction filledCircleEnd(event) {\\n  if (started === true) {\\n    drawFilledCircle(ctx, x, y, event.offsetX, event.offsetY);\\n    started = false;\\n  }\\n}\\nfunction drawCircle(context, x1, y1, x2, y2) {\\n  let temporary;\\n  if (x2 < x1) {\\n    temporary = x2;\\n    x2 = x1;\\n    x1 = temporary;\\n  }\\n  if (y2 < y1) {\\n    temporary = y2;\\n    y2 = y1;\\n    y1 = temporary;\\n  }\\n  context.strokeStyle = mainColor.value;\\n  context.lineWidth = currentPenSize;\\n  context.beginPath();\\n  context.arc((x2 + x1) / 2 / ratio, (y2 + y1) / 2 / ratio,\\n    (x2 - x1) / 2 / ratio, 0, 2 * Math.PI);\\n  context.stroke();\\n  context.closePath();\\n}\\nfunction drawFilledCircle(context, x1, y1, x2, y2) {\\n  let temporary;\\n  if (x2 < x1) {\\n    temporary = x2;\\n    x2 = x1;\\n    x1 = temporary;\\n  }\\n  if (y2 < y1) {\\n    temporary = y2;\\n    y2 = y1;\\n    y1 = temporary;\\n  }\\n  context.beginPath();\\n  context.arc((x2 + x1) / 2 / ratio, (y2 + y1) / 2 / ratio,\\n    (x2 - x1) / 2 / ratio, 0, 2 * Math.PI);\\n  context.fillStyle = mainColor.value;\\n  context.fill();\\n  context.closePath();\\n}\\nfunction circleEvent() {\\n  canvas.addEventListener('mousedown', circleStart);\\n  canvas.addEventListener('mouseup', circleEnd);\\n  arrayOfEventListeners.push(['mousedown', circleStart]);\\n  arrayOfEventListeners.push(['mouseup', circleEnd]);\\n}\\nfunction filledCircleEvent() {\\n  canvas.addEventListener('mousedown', circleStart);\\n  canvas.addEventListener('mouseup', filledCircleEnd);\\n  arrayOfEventListeners.push(['mousedown', circleStart]);\\n  arrayOfEventListeners.push(['mouseup', filledCircleEnd]);\\n}\\n// CIRCLE AND FILLED CIRCLE IMPLEMENTATION END\\n// HALF CIRCLE IMPLEMENTATION\\nfunction drawHalfCircle(context, x1, y1, x2, y2) {\\n  let clockWise = false;\\n\\n  if (x1 < x2) {\\n    clockWise = true;\\n  }\\n  context.strokeStyle = mainColor.value;\\n  context.lineWidth = currentPenSize;\\n  context.beginPath();\\n  const radius = Math.abs(y2 - y1) / 2;\\n  const gip = Math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2)) / 2;\\n  const tVar = (radius * radius) / gip;\\n  const kVar = Math.sqrt((radius * radius) - (tVar * tVar));\\n  const alpha = Math.acos(kVar / radius);\\n  context.arc((x2 + x1) / 2 / ratio, (y2 + y1) / 2 / ratio,\\n    radius / ratio, alpha, Math.PI + alpha, clockWise);\\n  context.stroke();\\n  context.closePath();\\n}\\nfunction halfCircleEnd(event) {\\n  if (started === true) {\\n    drawHalfCircle(ctx, x, y, event.offsetX, event.offsetY);\\n    started = false;\\n  }\\n}\\nfunction halfCircleEvent() {\\n  canvas.addEventListener('mousedown', circleStart);\\n  canvas.addEventListener('mouseup', halfCircleEnd);\\n  arrayOfEventListeners.push(['mousedown', circleStart]);\\n  arrayOfEventListeners.push(['mouseup', halfCircleEnd]);\\n}\\n// HALF CIRCLE IMPLEMENTATION END\\n// CLEAR IMPLEMENTATION\\nfunction clearEvent() {\\n  ctx.fillStyle = canvasBackgroundColor;\\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\\n}\\n// CLEAR IMPLEMENTATION END\\n// SPRAY IMPLEMENTATION\\nlet timeout;\\nfunction drawSpray() {\\n  for (let i = 20 * currentPenSize; i > 0; i -= 1) {\\n    const radius = 20 * currentPenSize;\\n    const offX = getRandomInt(-radius, radius);\\n    const offY = getRandomInt(-radius, radius);\\n    ctx.fillStyle = mainColor.value;\\n    ctx.fillRect((x + offX) / ratio, (y + offY) / ratio, 1, 1);\\n  }\\n}\\nfunction sprayStart(event) {\\n  getCoordinates(event);\\n  started = true;\\n  ctx.lineCap = 'round';\\n  ctx.lineJoin = 'round';\\n  timeout = setInterval(drawSpray, 50);\\n}\\nfunction sprayMove(event) {\\n  if (started === true) {\\n    getCoordinates(event);\\n  }\\n}\\nfunction sprayEnd() {\\n  if (started === true) {\\n    clearInterval(timeout);\\n    started = false;\\n  }\\n}\\nfunction sprayEvent() {\\n  canvas.addEventListener('mousedown', sprayStart);\\n  canvas.addEventListener('mousemove', sprayMove);\\n  canvas.addEventListener('mouseup', sprayEnd);\\n  arrayOfEventListeners.push(['mousedown', sprayStart]);\\n  arrayOfEventListeners.push(['mousemove', sprayMove]);\\n  arrayOfEventListeners.push(['mouseup', sprayEnd]);\\n}\\n// SPRAY IMPLEMENTATION END\\n// TOOLPICKER IMPLEMENTATION\\nfunction toolPickEvent(event) {\\n  if (event.target.parentElement === toolPicker) {\\n    removeEventListenersFromCanvas();\\n    switch (event.target.classList[1]) {\\n      case 'pen':\\n        PenEvent();\\n        break;\\n      case 'fillAllPixels':\\n        fillAllPixelsEvent();\\n        break;\\n      case 'eraser':\\n        eraserEvent();\\n        break;\\n      case 'stroke':\\n        strokeEvent();\\n        break;\\n      case 'rectange':\\n        rectangleEvent();\\n        break;\\n      case 'filledRectange':\\n        filledRectangleEvent();\\n        break;\\n      case 'circle':\\n        circleEvent();\\n        break;\\n      case 'filledCircle':\\n        filledCircleEvent();\\n        break;\\n      case 'halfCircle':\\n        halfCircleEvent();\\n        break;\\n      case 'clear':\\n        clearEvent();\\n        break;\\n      case 'spray':\\n        sprayEvent();\\n        break;\\n      default:\\n        break;\\n    }\\n  }\\n}\\n\\ntoolPicker.addEventListener('click', toolPickEvent);\\n// TOOLPICKER IMPLEMENTATION END\\n// CANVAS RESIZE IMPLEMENTATION\\nconst canvasSizeContainer = document.querySelector('.canvas-size-container');\\nlet currentCanvasSize = 32;\\nlet selectedCanvasSizeElement = canvasSizeContainer.children[0];\\nfunction ResizeFrames() {\\n  ctx.fillStyle = canvasBackgroundColor;\\n  const frameToReturn = currentFrame;\\n  for (let i = 0; i < frames.length; i += 1) {\\n    const loadedFrame = frames[i];\\n    currentFrame = i + 1;\\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\\n    ctx.drawImage(loadedFrame, 0, 0);\\n    takePicture();\\n  }\\n  loadFrame(frameToReturn);\\n}\\nfunction changeCanvasSize(newCanvasSize) {\\n  currentCanvasSize = newCanvasSize;\\n  canvas.width = currentCanvasSize;\\n  canvas.height = currentCanvasSize;\\n  ratio = canvas.clientWidth / canvas.width;\\n  ctx.fillStyle = canvasBackgroundColor;\\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\\n  ctx.drawImage(frames[currentFrame - 1], 0, 0);\\n  takePicture();\\n  ResizeFrames();\\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\\n}\\nfunction CanvasSizeEvent(event) {\\n  if (event.target.parentElement === canvasSizeContainer) {\\n    selectedCanvasSizeElement.classList.remove('selected');\\n    selectedCanvasSizeElement = event.target;\\n    selectedCanvasSizeElement.classList.add('selected');\\n  }\\n  changeCanvasSize(event.target.attributes[1].value);\\n}\\ndocument.onresize = function resizing() {\\n  ratio = canvas.clientWidth / canvas.width;\\n};\\ncanvasSizeContainer.addEventListener('click', CanvasSizeEvent);\\n// CANVAS RESIZE IMPLEMENTATION END\\n// LOCAL STORAGE IMPLEMENTATION\\nfunction unloadEvent() {\\n  stateObject.imgs = [];\\n  frames.forEach((el) => {\\n    stateObject.imgs.push(el.src);\\n  });\\n  stateObject.penSize = String(currentPenSize);\\n  stateObject.currentCanvasSize = String(currentCanvasSize);\\n  localStorage.removeItem('stateObject');\\n  localStorage.setItem('stateObject', JSON.stringify(stateObject));\\n}\\nfunction loadEvent() {\\n  selectedPenSizeElement.classList.remove('selected');\\n  selectedCanvasSizeElement.classList.remove('selected');\\n  switch (fromStorage.penSize) {\\n    case '1':\\n      selectedPenSizeElement = penSizeContainer.children[0];\\n      currentPenSize = 1;\\n      selectedPenSizeElement.classList.add('selected');\\n      break;\\n    case '2':\\n      selectedPenSizeElement = penSizeContainer.children[1];\\n      currentPenSize = 2;\\n      selectedPenSizeElement.classList.add('selected');\\n      break;\\n    case '3':\\n      selectedPenSizeElement = penSizeContainer.children[2];\\n      currentPenSize = 3;\\n      selectedPenSizeElement.classList.add('selected');\\n      break;\\n    case '4':\\n      selectedPenSizeElement = penSizeContainer.children[3];\\n      currentPenSize = 4;\\n      selectedPenSizeElement.classList.add('selected');\\n      break;\\n    default:\\n      selectedPenSizeElement = penSizeContainer.children[0];\\n      currentPenSize = 1;\\n      selectedPenSizeElement.classList.add('selected');\\n      break;\\n  }\\n  switch (fromStorage.currentCanvasSize) {\\n    case '32':\\n      selectedCanvasSizeElement = canvasSizeContainer.children[0];\\n      selectedCanvasSizeElement.classList.add('selected');\\n      break;\\n    case '64':\\n      selectedCanvasSizeElement = canvasSizeContainer.children[1];\\n      selectedCanvasSizeElement.classList.add('selected');\\n      canvas.width = 64;\\n      canvas.height = 64;\\n      break;\\n    case '128':\\n      selectedCanvasSizeElement = canvasSizeContainer.children[2];\\n      selectedCanvasSizeElement.classList.add('selected');\\n      canvas.width = 128;\\n      canvas.height = 128;\\n      break;\\n    default:\\n      selectedCanvasSizeElement = canvasSizeContainer.children[0];\\n      selectedCanvasSizeElement.classList.add('selected');\\n      break;\\n  }\\n  ratio = canvas.clientWidth / canvas.width;\\n  ctx.fillStyle = canvasBackgroundColor;\\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\\n}\\nwindow.addEventListener('unload', unloadEvent);\\nwindow.addEventListener('load', loadEvent);\\n// LOCAL STORAGE IMPLEMENTATION\\n// SHOW CURSOR COORDINATES IMPLEMENTATION\\nconst coords = document.querySelector('.coords');\\nfunction showCoords(event) {\\n  coords.innerText = `[${currentCanvasSize}x${currentCanvasSize}] ${parseInt(event.offsetX / ratio, 10)}:${parseInt(event.offsetY / ratio, 10)}`;\\n}\\ncanvas.addEventListener('mousemove', showCoords);\\n// SHOW CURSOR COORDINATES IMPLEMENTATION END\\n// GIF CREATION IMPLEMENTATION\\nconst downloadButton = document.querySelector('.downloadButton');\\nfunction createGif() {\\n  const encoder = new GIFEncoder();\\n  encoder.setRepeat(0);\\n  encoder.setDelay(1000 / FPS.value);\\n  encoder.start();\\n  const fakeCanvas = document.createElement('canvas');\\n  fakeCanvas.width = currentCanvasSize;\\n  fakeCanvas.height = currentCanvasSize;\\n  const fakeContext = fakeCanvas.getContext('2d');\\n  for (let i = 0; i < frames.length; i += 1) {\\n    fakeContext.clearRect(0, 0, canvas.width, canvas.height);\\n    fakeContext.drawImage(frames[i], 0, 0);\\n    encoder.addFrame(fakeContext);\\n  }\\n  encoder.finish();\\n  encoder.download('download.gif');\\n}\\ndownloadButton.addEventListener('click', createGif);\\n// GIF CREATION IMPLEMENTATION END\\n// KEY SHORTCUTS IMPLEMENTATION\\ndocument.onkeyup = function keyShortcuts(e) {\\n  if (e.code === 'KeyP') {\\n    PenEvent();\\n  } else if (e.shiftKey && e.code === 'KeyN') {\\n    duplicateFrame(currentFrame);\\n  } else if (e.shiftKey && e.code === 'KeyB') {\\n    deleteFrame(currentFrame);\\n  } else if (e.shiftKey && e.code === 'Equal') {\\n    if (currentCanvasSize == 32) {\\n      canvasSizeContainer.children[1].click();\\n    } else if (currentCanvasSize == 64) {\\n      canvasSizeContainer.children[2].click();\\n    }\\n  } else if (e.shiftKey && e.code === 'Minus') {\\n    if (currentCanvasSize == 64) {\\n      canvasSizeContainer.children[0].click();\\n    } else if (currentCanvasSize == 128) {\\n      canvasSizeContainer.children[1].click();\\n    }\\n  } else if (e.code === 'BracketRight') {\\n    if (currentPenSize == 1) {\\n      penSizeContainer.children[1].click();\\n    } else if (currentPenSize == 2) {\\n      penSizeContainer.children[2].click();\\n    } else if (currentPenSize == 3) {\\n      penSizeContainer.children[3].click();\\n    }\\n  } else if (e.code === 'BracketLeft') {\\n    if (currentPenSize == 2) {\\n      penSizeContainer.children[0].click();\\n    } else if (currentPenSize == 3) {\\n      penSizeContainer.children[1].click();\\n    } else if (currentPenSize == 4) {\\n      penSizeContainer.children[2].click();\\n    }\\n  } else if (e.ctrlKey && e.code === 'KeyS') {\\n    downloadButton.click();\\n  } else if (e.ctrlKey && e.code === 'KeyF') {\\n    FullscreenButton.click();\\n  } else if (e.code === 'ArrowUp' && currentFrame < mainFrames.children.length - 1) {\\n    loadFrame(currentFrame + 1);\\n  } else if (e.code === 'ArrowDown' && currentFrame > 1) {\\n    loadFrame(currentFrame - 1);\\n  } else if (e.code === 'KeyF') {\\n    fillAllPixelsEvent();\\n  } else if (e.code === 'KeyE') {\\n    eraserEvent();\\n  } else if (e.code === 'KeyS') {\\n    sprayEvent();\\n  } else if (e.code === 'KeyT') {\\n    strokeEvent();\\n  } else if (e.code === 'KeyR') {\\n    rectangleEvent();\\n  } else if (e.code === 'KeyG') {\\n    filledRectangleEvent();\\n  } else if (e.code === 'KeyA') {\\n    circleEvent();\\n  } else if (e.code === 'KeyD') {\\n    filledCircleEvent();\\n  } else if (e.code === 'KeyH') {\\n    halfCircleEvent();\\n  } else if (e.code === 'KeyC') {\\n    clearEvent();\\n  } else if (e.code === 'KeyN') {\\n    addNewFrame();\\n  }\\n};\\n// KEY SHORTCUTS IMPLEMENTATION END\\n// export\\n\",\"/**\\n * This class lets you encode animated GIF files\\n * Base class :  http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm\\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\\n * @author Thibault Imbert (AS3 version - bytearray.org)\\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\\n * @version 0.1 AS3 implementation\\n */\\n\\nGIFEncoder = function() {\\n\\n\\tfor (var i = 0, chr = {}; i < 256; i++)\\n\\t\\tchr[i] = String.fromCharCode(i);\\n\\n\\tfunction ByteArray() {\\n\\t\\tthis.bin = [];\\n\\t}\\n\\n\\tByteArray.prototype.getData = function() {\\n\\t\\tfor (var v = '', l = this.bin.length, i = 0; i < l; i++)\\n\\t\\t\\tv += chr[this.bin[i]];\\n\\t\\treturn v;\\n\\t};\\n\\n\\tByteArray.prototype.writeByte = function(val) {\\n\\t\\tthis.bin.push(val);\\n\\t};\\n\\n\\tByteArray.prototype.writeUTFBytes = function(string) {\\n\\t\\tfor (var l = string.length, i = 0; i < l; i++)\\n\\t\\t\\tthis.writeByte(string.charCodeAt(i));\\n\\t};\\n\\n\\tByteArray.prototype.writeBytes = function(array, offset, length) {\\n\\t\\tfor (var l = length || array.length, i = offset || 0; i < l; i++)\\n\\t\\t\\tthis.writeByte(array[i]);\\n\\t};\\n\\n\\tvar exports = {};\\n\\tvar width; // image size\\n\\tvar height;\\n\\tvar transparent = null; // transparent color if given\\n\\tvar transIndex; // transparent index in color table\\n\\tvar repeat = -1; // no repeat\\n\\tvar delay = 0; // frame delay (hundredths)\\n\\tvar started = false; // ready to output frames\\n\\tvar out;\\n\\tvar image; // current frame\\n\\tvar pixels; // BGR byte array from frame\\n\\tvar indexedPixels; // converted frame indexed to palette\\n\\tvar colorDepth; // number of bit planes\\n\\tvar colorTab; // RGB palette\\n\\tvar usedEntry = []; // active palette entries\\n\\tvar palSize = 7; // color table size (bits-1)\\n\\tvar dispose = -1; // disposal code (-1 = use default)\\n\\tvar closeStream = false; // close stream when finished\\n\\tvar firstFrame = true;\\n\\tvar sizeSet = false; // if false, get size from first frame\\n\\tvar sample = 10; // default sample interval for quantizer\\n\\tvar comment = \\\"Generated by jsgif (https://github.com/antimatter15/jsgif/)\\\"; // default comment for generated gif\\n\\n\\t/**\\n\\t * Sets the delay time between each frame, or changes it for subsequent frames\\n\\t * (applies to last frame added)\\n\\t * int delay time in milliseconds\\n\\t * @param ms\\n\\t */\\n\\n\\tvar setDelay = exports.setDelay = function setDelay(ms) {\\n\\t\\tdelay = Math.round(ms / 10);\\n\\t};\\n\\n\\t/**\\n\\t * Sets the GIF frame disposal code for the last added frame and any\\n\\t *\\n\\t * subsequent frames. Default is 0 if no transparent color has been set,\\n\\t * otherwise 2.\\n\\t * @param code\\n\\t * int disposal code.\\n\\t */\\n\\n\\tvar setDispose = exports.setDispose = function setDispose(code) {\\n\\t\\tif (code >= 0) dispose = code;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the number of times the set of GIF frames should be played. Default is\\n\\t * 1; 0 means play indefinitely. Must be invoked before the first image is\\n\\t * added.\\n\\t *\\n\\t * @param iter\\n\\t * int number of iterations.\\n\\t * @return\\n\\t */\\n\\n\\tvar setRepeat = exports.setRepeat = function setRepeat(iter) {\\n\\t\\tif (iter >= 0) repeat = iter;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the transparent color for the last added frame and any subsequent\\n\\t * frames. Since all colors are subject to modification in the quantization\\n\\t * process, the color in the final palette for each frame closest to the given\\n\\t * color becomes the transparent color for that frame. May be set to null to\\n\\t * indicate no transparent color.\\n\\t * @param\\n\\t * Color to be treated as transparent on display.\\n\\t */\\n\\n\\tvar setTransparent = exports.setTransparent = function setTransparent(c) {\\n\\t\\ttransparent = c;\\n\\t};\\n\\n\\n\\t/**\\n\\t * Sets the comment for the block comment\\n\\t * @param\\n\\t * string to be insterted as comment\\n\\t */\\n\\n\\tvar setComment = exports.setComment = function setComment(c) {\\n\\t\\tcomment = c;\\n\\t};\\n\\n\\n\\n\\t/**\\n\\t * The addFrame method takes an incoming BitmapData object to create each frames\\n\\t * @param\\n\\t * BitmapData object to be treated as a GIF's frame\\n\\t */\\n\\n\\tvar addFrame = exports.addFrame = function addFrame(im, is_imageData) {\\n\\n\\t\\tif ((im === null) || !started || out === null) {\\n\\t\\t\\tthrow new Error(\\\"Please call start method before calling addFrame\\\");\\n\\t\\t}\\n\\n\\t\\tvar ok = true;\\n\\n\\t\\ttry {\\n\\t\\t\\tif (!is_imageData) {\\n\\t\\t\\t\\timage = im.getImageData(0, 0, im.canvas.width, im.canvas.height).data;\\n\\t\\t\\t\\tif (!sizeSet) setSize(im.canvas.width, im.canvas.height);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif(im instanceof ImageData) {\\n\\t\\t\\t\\t\\timage = im.data;\\n\\t\\t\\t\\t\\tif(!sizeset || width!=im.width || height!=im.height) {\\n\\t\\t\\t\\t\\t\\tsetSize(im.width,im.height);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if(im instanceof Uint8ClampedArray) {\\n\\t\\t\\t\\t\\tif(im.length==(width*height*4)) {\\n\\t\\t\\t\\t\\t\\timage=im;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tconsole.log(\\\"Please set the correct size: ImageData length mismatch\\\");\\n\\t\\t\\t\\t\\t\\tok=false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tconsole.log(\\\"Please provide correct input\\\");\\n\\t\\t\\t\\t\\tok=false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tgetImagePixels(); // convert to correct format if necessary\\n\\t\\t\\tanalyzePixels(); // build color table & map pixels\\n\\n\\t\\t\\tif (firstFrame) {\\n\\t\\t\\t\\twriteLSD(); // logical screen descriptior\\n\\t\\t\\t\\twritePalette(); // global color table\\n\\t\\t\\t\\tif (repeat >= 0) {\\n\\t\\t\\t\\t\\t// use NS app extension to indicate reps\\n\\t\\t\\t\\t\\twriteNetscapeExt();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\twriteGraphicCtrlExt(); // write graphic control extension\\n\\t\\t\\tif (comment !== '') {\\n\\t\\t\\t\\twriteCommentExt(); // write comment extension\\n\\t\\t\\t}\\n\\t\\t\\twriteImageDesc(); // image descriptor\\n\\t\\t\\tif (!firstFrame) writePalette(); // local color table\\n\\t\\t\\twritePixels(); // encode and write pixel data\\n\\t\\t\\tfirstFrame = false;\\n\\t\\t} catch (e) {\\n\\t\\t\\tok = false;\\n\\t\\t}\\n\\n\\t\\treturn ok;\\n\\t};\\n\\t\\n\\t/**\\n\\t* @description: Downloads the encoded gif with the given name\\n\\t* No need of any conversion from the stream data (out) to base64\\n\\t* Solves the issue of large file sizes when there are more frames\\n\\t* and does not involve in creation of any temporary data in the process\\n\\t* so no wastage of memory, and speeds up the process of downloading\\n\\t* to just calling this function.\\n\\t* @parameter {String} filename filename used for downloading the gif\\n\\t*/\\n\\t\\n\\tvar download = exports.download = function download(filename) {\\n\\t\\tif(out===null || closeStream==false) {\\n\\t\\t\\tconsole.log(\\\"Please call start method and add frames and call finish method before calling download\\\"); \\n\\t\\t} else {\\n\\t\\t\\tfilename= filename !== undefined ? ( filename.endsWith(\\\".gif\\\")? filename: filename+\\\".gif\\\" ): \\\"download.gif\\\";\\n\\t\\t\\tvar templink = document.createElement(\\\"a\\\");\\n\\t\\t\\ttemplink.download=filename;\\n\\t\\t\\ttemplink.href= URL.createObjectURL(new Blob([new Uint8Array(out.bin)], {type : \\\"image/gif\\\" } ));\\n\\t\\t\\ttemplink.click();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Adds final trailer to the GIF stream, if you don't call the finish method\\n\\t * the GIF stream will not be valid.\\n\\t */\\n\\n\\tvar finish = exports.finish = function finish() {\\n\\n\\t\\tif (!started) return false;\\n\\n\\t\\tvar ok = true;\\n\\t\\tstarted = false;\\n\\n\\t\\ttry {\\n\\t\\t\\tout.writeByte(0x3b); // gif trailer\\n\\t\\t\\tcloseStream=true;\\n\\t\\t} catch (e) {\\n\\t\\t\\tok = false;\\n\\t\\t}\\n\\n\\t\\treturn ok;\\n\\t};\\n\\n\\t/**\\n\\t * Resets some members so that a new stream can be started.\\n\\t * This method is actually called by the start method\\n\\t */\\n\\n\\tvar reset = function reset() {\\n\\n\\t\\t// reset for subsequent use\\n\\t\\ttransIndex = 0;\\n\\t\\timage = null;\\n\\t\\tpixels = null;\\n\\t\\tindexedPixels = null;\\n\\t\\tcolorTab = null;\\n\\t\\tcloseStream = false;\\n\\t\\tfirstFrame = true;\\n\\t};\\n\\n\\t/**\\n\\t * * Sets frame rate in frames per second. Equivalent to\\n\\t * <code>setDelay(1000/fps)</code>.\\n\\t * @param fps\\n\\t * float frame rate (frames per second)\\n\\t */\\n\\n\\tvar setFrameRate = exports.setFrameRate = function setFrameRate(fps) {\\n\\t\\tif (fps != 0xf) delay = Math.round(100 / fps);\\n\\t};\\n\\n\\t/**\\n\\t * Sets quality of color quantization (conversion of images to the maximum 256\\n\\t * colors allowed by the GIF specification). Lower values (minimum = 1)\\n\\t * produce better colors, but slow processing significantly. 10 is the\\n\\t * default, and produces good color mapping at reasonable speeds. Values\\n\\t * greater than 20 do not yield significant improvements in speed.\\n\\t * @param quality\\n\\t * int greater than 0.\\n\\t * @return\\n\\t */\\n\\n\\tvar setQuality = exports.setQuality = function setQuality(quality) {\\n\\t\\tif (quality < 1) quality = 1;\\n\\t\\tsample = quality;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the GIF frame size. The default size is the size of the first frame\\n\\t * added if this method is not invoked.\\n\\t * @param w\\n\\t * int frame width.\\n\\t * @param h\\n\\t * int frame width.\\n\\t */\\n\\n\\tvar setSize = exports.setSize = function setSize(w, h) {\\n\\n\\t\\tif (started && !firstFrame) return;\\n\\t\\twidth = w;\\n\\t\\theight = h;\\n\\t\\tif (width < 1) width = 320;\\n\\t\\tif (height < 1) height = 240;\\n\\t\\tsizeSet = true;\\n\\t};\\n\\n\\t/**\\n\\t * Initiates GIF file creation on the given stream.\\n\\t * @param os\\n\\t * OutputStream on which GIF images are written.\\n\\t * @return false if initial write failed.\\n\\t */\\n\\n\\tvar start = exports.start = function start() {\\n\\n\\t\\treset();\\n\\t\\tvar ok = true;\\n\\t\\tcloseStream = false;\\n\\t\\tout = new ByteArray();\\n\\t\\ttry {\\n\\t\\t\\tout.writeUTFBytes(\\\"GIF89a\\\"); // header\\n\\t\\t} catch (e) {\\n\\t\\t\\tok = false;\\n\\t\\t}\\n\\n\\t\\treturn started = ok;\\n\\t};\\n\\n\\tvar cont = exports.cont = function cont() {\\n\\n\\t\\treset();\\n\\t\\tvar ok = true;\\n\\t\\tcloseStream = false;\\n\\t\\tout = new ByteArray();\\n\\n\\t\\treturn started = ok;\\n\\t};\\n\\n\\t/**\\n\\t * Analyzes image colors and creates color map.\\n\\t */\\n\\n\\tvar analyzePixels = function analyzePixels() {\\n\\n\\t\\tvar len = pixels.length;\\n\\t\\tvar nPix = len / 3;\\n\\t\\tindexedPixels = [];\\n\\t\\tvar nq = new NeuQuant(pixels, len, sample);\\n\\n\\t\\t// initialize quantizer\\n\\t\\tcolorTab = nq.process(); // create reduced palette\\n\\n\\t\\t// map image pixels to new palette\\n\\t\\tvar k = 0;\\n\\t\\tfor (var j = 0; j < nPix; j++) {\\n\\t\\t\\tvar index = nq.map(pixels[k++] & 0xff, pixels[k++] & 0xff, pixels[k++] & 0xff);\\n\\t\\t\\tusedEntry[index] = true;\\n\\t\\t\\tindexedPixels[j] = index;\\n\\t\\t}\\n\\n\\t\\tpixels = null;\\n\\t\\tcolorDepth = 8;\\n\\t\\tpalSize = 7;\\n\\n\\t\\t// get closest match to transparent color if specified\\n\\t\\tif (transparent !== null) {\\n\\t\\t\\ttransIndex = findClosest(transparent);\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Returns index of palette color closest to c\\n\\t */\\n\\n\\tvar findClosest = function findClosest(c) {\\n\\n\\t\\tif (colorTab === null) return -1;\\n\\t\\tvar r = (c & 0xFF0000) >> 16;\\n\\t\\tvar g = (c & 0x00FF00) >> 8;\\n\\t\\tvar b = (c & 0x0000FF);\\n\\t\\tvar minpos = 0;\\n\\t\\tvar dmin = 256 * 256 * 256;\\n\\t\\tvar len = colorTab.length;\\n\\n\\t\\tfor (var i = 0; i < len;) {\\n\\t\\t\\tvar dr = r - (colorTab[i++] & 0xff);\\n\\t\\t\\tvar dg = g - (colorTab[i++] & 0xff);\\n\\t\\t\\tvar db = b - (colorTab[i] & 0xff);\\n\\t\\t\\tvar d = dr * dr + dg * dg + db * db;\\n\\t\\t\\tvar index = i / 3;\\n\\t\\t\\tif (usedEntry[index] && (d < dmin)) {\\n\\t\\t\\t\\tdmin = d;\\n\\t\\t\\t\\tminpos = index;\\n\\t\\t\\t}\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\treturn minpos;\\n\\t};\\n\\n\\t/**\\n\\t * Extracts image pixels into byte array \\\"pixels\\n\\t */\\n\\n\\tvar getImagePixels = function getImagePixels() {\\n\\t\\tvar w = width;\\n\\t\\tvar h = height;\\n\\t\\tpixels = [];\\n\\t\\tvar data = image;\\n\\t\\tvar count = 0;\\n\\n\\t\\tfor (var i = 0; i < h; i++) {\\n\\n\\t\\t\\tfor (var j = 0; j < w; j++) {\\n\\n\\t\\t\\t\\tvar b = (i * w * 4) + j * 4;\\n\\t\\t\\t\\tpixels[count++] = data[b];\\n\\t\\t\\t\\tpixels[count++] = data[b + 1];\\n\\t\\t\\t\\tpixels[count++] = data[b + 2];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Writes Graphic Control Extension\\n\\t */\\n\\n\\tvar writeGraphicCtrlExt = function writeGraphicCtrlExt() {\\n\\t\\tout.writeByte(0x21); // extension introducer\\n\\t\\tout.writeByte(0xf9); // GCE label\\n\\t\\tout.writeByte(4); // data block size\\n\\t\\tvar transp;\\n\\t\\tvar disp;\\n\\t\\tif (transparent === null) {\\n\\t\\t\\ttransp = 0;\\n\\t\\t\\tdisp = 0; // dispose = no action\\n\\t\\t} else {\\n\\t\\t\\ttransp = 1;\\n\\t\\t\\tdisp = 2; // force clear if using transparent color\\n\\t\\t}\\n\\t\\tif (dispose >= 0) {\\n\\t\\t\\tdisp = dispose & 7; // user override\\n\\t\\t}\\n\\t\\tdisp <<= 2;\\n\\t\\t// packed fields\\n\\t\\tout.writeByte(0 | // 1:3 reserved\\n\\t\\t\\tdisp | // 4:6 disposal\\n\\t\\t\\t0 | // 7 user input - 0 = none\\n\\t\\t\\ttransp); // 8 transparency flag\\n\\n\\t\\tWriteShort(delay); // delay x 1/100 sec\\n\\t\\tout.writeByte(transIndex); // transparent color index\\n\\t\\tout.writeByte(0); // block terminator\\n\\t};\\n\\n\\t/**\\n\\t * Writes Comment Extention\\n\\t */\\n\\n\\tvar writeCommentExt = function writeCommentExt() {\\n\\t\\tout.writeByte(0x21); // extension introducer\\n\\t\\tout.writeByte(0xfe); // comment label\\n\\t\\tout.writeByte(comment.length); // Block Size (s)\\n\\t\\tout.writeUTFBytes(comment);\\n\\t\\tout.writeByte(0); // block terminator\\n\\t};\\n\\n\\n\\t/**\\n\\t * Writes Image Descriptor\\n\\t */\\n\\n\\tvar writeImageDesc = function writeImageDesc() {\\n\\n\\t\\tout.writeByte(0x2c); // image separator\\n\\t\\tWriteShort(0); // image position x,y = 0,0\\n\\t\\tWriteShort(0);\\n\\t\\tWriteShort(width); // image size\\n\\t\\tWriteShort(height);\\n\\n\\t\\t// packed fields\\n\\t\\tif (firstFrame) {\\n\\t\\t\\t// no LCT - GCT is used for first (or only) frame\\n\\t\\t\\tout.writeByte(0);\\n\\t\\t} else {\\n\\t\\t\\t// specify normal LCT\\n\\t\\t\\tout.writeByte(0x80 | // 1 local color table 1=yes\\n\\t\\t\\t\\t0 | // 2 interlace - 0=no\\n\\t\\t\\t\\t0 | // 3 sorted - 0=no\\n\\t\\t\\t\\t0 | // 4-5 reserved\\n\\t\\t\\t\\tpalSize); // 6-8 size of color table\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Writes Logical Screen Descriptor\\n\\t */\\n\\n\\tvar writeLSD = function writeLSD() {\\n\\n\\t\\t// logical screen size\\n\\t\\tWriteShort(width);\\n\\t\\tWriteShort(height);\\n\\t\\t// packed fields\\n\\t\\tout.writeByte((0x80 | // 1 : global color table flag = 1 (gct used)\\n\\t\\t\\t0x70 | // 2-4 : color resolution = 7\\n\\t\\t\\t0x00 | // 5 : gct sort flag = 0\\n\\t\\t\\tpalSize)); // 6-8 : gct size\\n\\n\\t\\tout.writeByte(0); // background color index\\n\\t\\tout.writeByte(0); // pixel aspect ratio - assume 1:1\\n\\t};\\n\\n\\t/**\\n\\t * Writes Netscape application extension to define repeat count.\\n\\t */\\n\\n\\tvar writeNetscapeExt = function writeNetscapeExt() {\\n\\t\\tout.writeByte(0x21); // extension introducer\\n\\t\\tout.writeByte(0xff); // app extension label\\n\\t\\tout.writeByte(11); // block size\\n\\t\\tout.writeUTFBytes(\\\"NETSCAPE\\\" + \\\"2.0\\\"); // app id + auth code\\n\\t\\tout.writeByte(3); // sub-block size\\n\\t\\tout.writeByte(1); // loop sub-block id\\n\\t\\tWriteShort(repeat); // loop count (extra iterations, 0=repeat forever)\\n\\t\\tout.writeByte(0); // block terminator\\n\\t};\\n\\n\\t/**\\n\\t * Writes color table\\n\\t */\\n\\n\\tvar writePalette = function writePalette() {\\n\\t\\tout.writeBytes(colorTab);\\n\\t\\tvar n = (3 * 256) - colorTab.length;\\n\\t\\tfor (var i = 0; i < n; i++) out.writeByte(0);\\n\\t};\\n\\n\\tvar WriteShort = function WriteShort(pValue) {\\n\\t\\tout.writeByte(pValue & 0xFF);\\n\\t\\tout.writeByte((pValue >> 8) & 0xFF);\\n\\t};\\n\\n\\t/**\\n\\t * Encodes and writes pixel data\\n\\t */\\n\\n\\tvar writePixels = function writePixels() {\\n\\t\\tvar myencoder = new LZWEncoder(width, height, indexedPixels, colorDepth);\\n\\t\\tmyencoder.encode(out);\\n\\t};\\n\\n\\t/**\\n\\t * Retrieves the GIF stream\\n\\t */\\n\\n\\tvar stream = exports.stream = function stream() {\\n\\t\\treturn out;\\n\\t};\\n\\n\\tvar setProperties = exports.setProperties = function setProperties(has_start, is_first) {\\n\\t\\tstarted = has_start;\\n\\t\\tfirstFrame = is_first;\\n\\t};\\n\\n\\treturn exports;\\n\\n};\\n\",\"/**\\n * This class handles LZW encoding\\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\\n * @author Thibault Imbert (AS3 version - bytearray.org)\\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\\n * @version 0.1 AS3 implementation\\n */\\n\\nLZWEncoder = function () {\\n\\n  var exports = {};\\n  var EOF = -1;\\n  var imgW;\\n  var imgH;\\n  var pixAry;\\n  var initCodeSize;\\n  var remaining;\\n  var curPixel;\\n\\n  // GIFCOMPR.C - GIF Image compression routines\\n  // Lempel-Ziv compression based on 'compress'. GIF modifications by\\n  // David Rowley (mgardi@watdcsu.waterloo.edu)\\n  // General DEFINEs\\n\\n  var BITS = 12;\\n  var HSIZE = 5003; // 80% occupancy\\n\\n  // GIF Image compression - modified 'compress'\\n  // Based on: compress.c - File compression ala IEEE Computer, June 1984.\\n  // By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\\n  // Jim McKie (decvax!mcvax!jim)\\n  // Steve Davies (decvax!vax135!petsd!peora!srd)\\n  // Ken Turkowski (decvax!decwrl!turtlevax!ken)\\n  // James A. Woods (decvax!ihnp4!ames!jaw)\\n  // Joe Orost (decvax!vax135!petsd!joe)\\n\\n  var n_bits; // number of bits/code\\n  var maxbits = BITS; // user settable max # bits/code\\n  var maxcode; // maximum code, given n_bits\\n  var maxmaxcode = 1 << BITS; // should NEVER generate this code\\n  var htab = [];\\n  var codetab = [];\\n  var hsize = HSIZE; // for dynamic table sizing\\n  var free_ent = 0; // first unused entry\\n\\n  // block compression parameters -- after all codes are used up,\\n  // and compression rate changes, start over.\\n\\n  var clear_flg = false;\\n\\n  // Algorithm: use open addressing double hashing (no chaining) on the\\n  // prefix code / next character combination. We do a variant of Knuth's\\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\\n  // secondary probe. Here, the modular division first probe is gives way\\n  // to a faster exclusive-or manipulation. Also do block compression with\\n  // an adaptive reset, whereby the code table is cleared when the compression\\n  // ratio decreases, but after the table fills. The variable-length output\\n  // codes are re-sized at this point, and a special CLEAR code is generated\\n  // for the decompressor. Late addition: construct the table according to\\n  // file size for noticeable speed improvement on small files. Please direct\\n  // questions about this implementation to ames!jaw.\\n\\n  var g_init_bits;\\n  var ClearCode;\\n  var EOFCode;\\n\\n  // output\\n  // Output the given code.\\n  // Inputs:\\n  // code: A n_bits-bit integer. If == -1, then EOF. This assumes\\n  // that n_bits =< wordsize - 1.\\n  // Outputs:\\n  // Outputs code to the file.\\n  // Assumptions:\\n  // Chars are 8 bits long.\\n  // Algorithm:\\n  // Maintain a BITS character long buffer (so that 8 codes will\\n  // fit in it exactly). Use the VAX insv instruction to insert each\\n  // code in turn. When the buffer fills up empty it and start over.\\n\\n  var cur_accum = 0;\\n  var cur_bits = 0;\\n  var masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\\n\\n  // Number of characters so far in this 'packet'\\n  var a_count;\\n\\n  // Define the storage for the packet accumulator\\n  var accum = [];\\n\\n  var LZWEncoder = exports.LZWEncoder = function LZWEncoder(width, height, pixels, color_depth) {\\n    imgW = width;\\n    imgH = height;\\n    pixAry = pixels;\\n    initCodeSize = Math.max(2, color_depth);\\n  };\\n\\n  // Add a character to the end of the current packet, and if it is 254\\n  // characters, flush the packet to disk.\\n  var char_out = function char_out(c, outs) {\\n    accum[a_count++] = c;\\n    if (a_count >= 254) flush_char(outs);\\n  };\\n\\n  // Clear out the hash table\\n  // table clear for block compress\\n\\n  var cl_block = function cl_block(outs) {\\n    cl_hash(hsize);\\n    free_ent = ClearCode + 2;\\n    clear_flg = true;\\n    output(ClearCode, outs);\\n  };\\n\\n  // reset code table\\n  var cl_hash = function cl_hash(hsize) {\\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\\n  };\\n\\n  var compress = exports.compress = function compress(init_bits, outs) {\\n\\n    var fcode;\\n    var i; /* = 0 */\\n    var c;\\n    var ent;\\n    var disp;\\n    var hsize_reg;\\n    var hshift;\\n\\n    // Set up the globals: g_init_bits - initial number of bits\\n    g_init_bits = init_bits;\\n\\n    // Set up the necessary values\\n    clear_flg = false;\\n    n_bits = g_init_bits;\\n    maxcode = MAXCODE(n_bits);\\n\\n    ClearCode = 1 << (init_bits - 1);\\n    EOFCode = ClearCode + 1;\\n    free_ent = ClearCode + 2;\\n\\n    a_count = 0; // clear packet\\n\\n    ent = nextPixel();\\n\\n    hshift = 0;\\n    for (fcode = hsize; fcode < 65536; fcode *= 2)\\n      ++hshift;\\n    hshift = 8 - hshift; // set hash code range bound\\n\\n    hsize_reg = hsize;\\n    cl_hash(hsize_reg); // clear hash table\\n\\n    output(ClearCode, outs);\\n\\n    outer_loop: while ((c = nextPixel()) != EOF) {\\n      fcode = (c << maxbits) + ent;\\n      i = (c << hshift) ^ ent; // xor hashing\\n\\n      if (htab[i] == fcode) {\\n        ent = codetab[i];\\n        continue;\\n      }\\n\\n      else if (htab[i] >= 0) { // non-empty slot\\n\\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\\n        if (i === 0) disp = 1;\\n\\n        do {\\n          if ((i -= disp) < 0)\\n            i += hsize_reg;\\n\\n          if (htab[i] == fcode) {\\n            ent = codetab[i];\\n            continue outer_loop;\\n          }\\n        } while (htab[i] >= 0);\\n      }\\n\\n      output(ent, outs);\\n      ent = c;\\n      if (free_ent < maxmaxcode) {\\n        codetab[i] = free_ent++; // code -> hashtable\\n        htab[i] = fcode;\\n      }\\n      else cl_block(outs);\\n    }\\n\\n    // Put out the final code.\\n    output(ent, outs);\\n    output(EOFCode, outs);\\n  };\\n\\n  // ----------------------------------------------------------------------------\\n  var encode = exports.encode = function encode(os) {\\n    os.writeByte(initCodeSize); // write \\\"initial code size\\\" byte\\n    remaining = imgW * imgH; // reset navigation variables\\n    curPixel = 0;\\n    compress(initCodeSize + 1, os); // compress and write the pixel data\\n    os.writeByte(0); // write block terminator\\n  };\\n\\n  // Flush the packet to disk, and reset the accumulator\\n  var flush_char = function flush_char(outs) {\\n    if (a_count > 0) {\\n      outs.writeByte(a_count);\\n      outs.writeBytes(accum, 0, a_count);\\n      a_count = 0;\\n    }\\n  };\\n\\n  var MAXCODE = function MAXCODE(n_bits) {\\n    return (1 << n_bits) - 1;\\n  };\\n\\n  // ----------------------------------------------------------------------------\\n  // Return the next pixel from the image\\n  // ----------------------------------------------------------------------------\\n\\n  var nextPixel = function nextPixel() {\\n    if (remaining === 0) return EOF;\\n    --remaining;\\n    var pix = pixAry[curPixel++];\\n    return pix & 0xff;\\n  };\\n\\n  var output = function output(code, outs) {\\n\\n    cur_accum &= masks[cur_bits];\\n\\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\\n    else cur_accum = code;\\n\\n    cur_bits += n_bits;\\n\\n    while (cur_bits >= 8) {\\n      char_out((cur_accum & 0xff), outs);\\n      cur_accum >>= 8;\\n      cur_bits -= 8;\\n    }\\n\\n    // If the next entry is going to be too big for the code size,\\n    // then increase it, if possible.\\n\\n    if (free_ent > maxcode || clear_flg) {\\n\\n      if (clear_flg) {\\n\\n        maxcode = MAXCODE(n_bits = g_init_bits);\\n        clear_flg = false;\\n\\n      } else {\\n\\n        ++n_bits;\\n        if (n_bits == maxbits) maxcode = maxmaxcode;\\n        else maxcode = MAXCODE(n_bits);\\n      }\\n    }\\n\\n    if (code == EOFCode) {\\n\\n      // At EOF, write the rest of the buffer.\\n      while (cur_bits > 0) {\\n        char_out((cur_accum & 0xff), outs);\\n        cur_accum >>= 8;\\n        cur_bits -= 8;\\n      }\\n\\n      flush_char(outs);\\n    }\\n  };\\n\\n  LZWEncoder.apply(this, arguments);\\n  return exports;\\n};\\n\",\"/*\\n * NeuQuant Neural-Net Quantization Algorithm\\n * ------------------------------------------\\n *\\n * Copyright (c) 1994 Anthony Dekker\\n *\\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\\n * \\\"Kohonen neural networks for optimal colour quantization\\\" in \\\"Network:\\n * Computation in Neural Systems\\\" Vol. 5 (1994) pp 351-367. for a discussion of\\n * the algorithm.\\n *\\n * Any party obtaining a copy of these files from the author, directly or\\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\\n * this software and documentation files (the \\\"Software\\\"), including without\\n * limitation the rights to use, copy, modify, merge, publish, distribute,\\n * sublicense, and/or sell copies of the Software, and to permit persons who\\n * receive copies from any such party to do so, with the only requirement being\\n * that this copyright notice remain intact.\\n */\\n\\n/*\\n * This class handles Neural-Net quantization algorithm\\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\\n * @author Thibault Imbert (AS3 version - bytearray.org)\\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\\n * @version 0.1 AS3 implementation\\n */\\n\\nNeuQuant = function () {\\n\\n  var exports = {};\\n  var netsize = 256; /* number of colours used */\\n\\n  /* four primes near 500 - assume no image has a length so large */\\n  /* that it is divisible by all four primes */\\n\\n  var prime1 = 499;\\n  var prime2 = 491;\\n  var prime3 = 487;\\n  var prime4 = 503;\\n  var minpicturebytes = (3 * prime4); /* minimum size for input image */\\n\\n\\t/*\\n\\t * Program Skeleton ---------------- [select samplefac in range 1..30] [read\\n\\t * image from input file] pic = (unsigned char*) malloc(3*width*height);\\n\\t * initnet(pic,3*width*height,samplefac); learn(); unbiasnet(); [write output\\n\\t * image header, using writecolourmap(f)] inxbuild(); write output image using\\n\\t * inxsearch(b,g,r)\\n\\t */\\n\\n\\t/*\\n\\t * Network Definitions -------------------\\n\\t */\\n\\n  var maxnetpos = (netsize - 1);\\n  var netbiasshift = 4; /* bias for colour values */\\n  var ncycles = 100; /* no. of learning cycles */\\n\\n  /* defs for freq and bias */\\n  var intbiasshift = 16; /* bias for fractions */\\n  var intbias = (1 << intbiasshift);\\n  var gammashift = 10; /* gamma = 1024 */\\n  var gamma = (1 << gammashift);\\n  var betashift = 10;\\n  var beta = (intbias >> betashift); /* beta = 1/1024 */\\n  var betagamma = (intbias << (gammashift - betashift));\\n\\n  /* defs for decreasing radius factor */\\n  var initrad = (netsize >> 3); /* for 256 cols, radius starts */\\n  var radiusbiasshift = 6; /* at 32.0 biased by 6 bits */\\n  var radiusbias = (1 << radiusbiasshift);\\n  var initradius = (initrad * radiusbias); /* and decreases by a */\\n  var radiusdec = 30; /* factor of 1/30 each cycle */\\n\\n  /* defs for decreasing alpha factor */\\n  var alphabiasshift = 10; /* alpha starts at 1.0 */\\n  var initalpha = (1 << alphabiasshift);\\n  var alphadec; /* biased by 10 bits */\\n\\n  /* radbias and alpharadbias used for radpower calculation */\\n  var radbiasshift = 8;\\n  var radbias = (1 << radbiasshift);\\n  var alpharadbshift = (alphabiasshift + radbiasshift);\\n  var alpharadbias = (1 << alpharadbshift);\\n\\n\\t/*\\n\\t * Types and Global Variables --------------------------\\n\\t */\\n\\n  var thepicture; /* the input image itself */\\n  var lengthcount; /* lengthcount = H*W*3 */\\n  var samplefac; /* sampling factor 1..30 */\\n\\n  // typedef int pixel[4]; /* BGRc */\\n  var network; /* the network itself - [netsize][4] */\\n  var netindex = [];\\n\\n  /* for network lookup - really 256 */\\n  var bias = [];\\n\\n  /* bias and freq arrays for learning */\\n  var freq = [];\\n  var radpower = [];\\n\\n  var NeuQuant = exports.NeuQuant = function NeuQuant(thepic, len, sample) {\\n\\n    var i;\\n    var p;\\n\\n    thepicture = thepic;\\n    lengthcount = len;\\n    samplefac = sample;\\n\\n    network = new Array(netsize);\\n\\n    for (i = 0; i < netsize; i++) {\\n\\n      network[i] = new Array(4);\\n      p = network[i];\\n      p[0] = p[1] = p[2] = (i << (netbiasshift + 8)) / netsize;\\n      freq[i] = intbias / netsize; /* 1/netsize */\\n      bias[i] = 0;\\n    }\\n  };\\n\\n  var colorMap = function colorMap() {\\n\\n    var map = [];\\n    var index = new Array(netsize);\\n\\n    for (var i = 0; i < netsize; i++)\\n      index[network[i][3]] = i;\\n\\n    var k = 0;\\n    for (var l = 0; l < netsize; l++) {\\n      var j = index[l];\\n      map[k++] = (network[j][0]);\\n      map[k++] = (network[j][1]);\\n      map[k++] = (network[j][2]);\\n    }\\n\\n    return map;\\n  };\\n\\n\\t/*\\n\\t * Insertion sort of network and building of netindex[0..255] (to do after\\n\\t * unbias)\\n\\t * -------------------------------------------------------------------------------\\n\\t */\\n\\n  var inxbuild = function inxbuild() {\\n\\n    var i;\\n    var j;\\n    var smallpos;\\n    var smallval;\\n    var p;\\n    var q;\\n    var previouscol;\\n    var startpos;\\n\\n    previouscol = 0;\\n    startpos = 0;\\n    for (i = 0; i < netsize; i++) {\\n\\n      p = network[i];\\n      smallpos = i;\\n      smallval = p[1]; /* index on g */\\n\\n      /* find smallest in i..netsize-1 */\\n      for (j = i + 1; j < netsize; j++) {\\n\\n        q = network[j];\\n        if (q[1] < smallval) { /* index on g */\\n          smallpos = j;\\n          smallval = q[1]; /* index on g */\\n        }\\n      }\\n      q = network[smallpos];\\n\\n      /* swap p (i) and q (smallpos) entries */\\n      if (i != smallpos) {\\n        j = q[0];\\n        q[0] = p[0];\\n        p[0] = j;\\n        j = q[1];\\n        q[1] = p[1];\\n        p[1] = j;\\n        j = q[2];\\n        q[2] = p[2];\\n        p[2] = j;\\n        j = q[3];\\n        q[3] = p[3];\\n        p[3] = j;\\n      }\\n\\n      /* smallval entry is now in position i */\\n\\n      if (smallval != previouscol) {\\n\\n        netindex[previouscol] = (startpos + i) >> 1;\\n\\n        for (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\\n\\n        previouscol = smallval;\\n        startpos = i;\\n      }\\n    }\\n\\n    netindex[previouscol] = (startpos + maxnetpos) >> 1;\\n    for (j = previouscol + 1; j < 256; j++) netindex[j] = maxnetpos; /* really 256 */\\n  };\\n\\n\\t/*\\n\\t * Main Learning Loop ------------------\\n\\t */\\n\\n  var learn = function learn() {\\n\\n    var i;\\n    var j;\\n    var b;\\n    var g;\\n    var r;\\n    var radius;\\n    var rad;\\n    var alpha;\\n    var step;\\n    var delta;\\n    var samplepixels;\\n    var p;\\n    var pix;\\n    var lim;\\n\\n    if (lengthcount < minpicturebytes) samplefac = 1;\\n\\n    alphadec = 30 + ((samplefac - 1) / 3);\\n    p = thepicture;\\n    pix = 0;\\n    lim = lengthcount;\\n    samplepixels = lengthcount / (3 * samplefac);\\n    delta = (samplepixels / ncycles) | 0;\\n    alpha = initalpha;\\n    radius = initradius;\\n\\n    rad = radius >> radiusbiasshift;\\n    if (rad <= 1) rad = 0;\\n\\n    for (i = 0; i < rad; i++) radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad));\\n\\n    if (lengthcount < minpicturebytes) step = 3;\\n\\n    else if ((lengthcount % prime1) !== 0) step = 3 * prime1;\\n\\n    else {\\n\\n      if ((lengthcount % prime2) !== 0) step = 3 * prime2;\\n      else {\\n        if ((lengthcount % prime3) !== 0) step = 3 * prime3;\\n        else step = 3 * prime4;\\n      }\\n    }\\n\\n    i = 0;\\n    while (i < samplepixels) {\\n\\n      b = (p[pix + 0] & 0xff) << netbiasshift;\\n      g = (p[pix + 1] & 0xff) << netbiasshift;\\n      r = (p[pix + 2] & 0xff) << netbiasshift;\\n      j = contest(b, g, r);\\n\\n      altersingle(alpha, j, b, g, r);\\n      if (rad !== 0) alterneigh(rad, j, b, g, r); /* alter neighbours */\\n\\n      pix += step;\\n      if (pix >= lim) pix -= lengthcount;\\n\\n      i++;\\n\\n      if (delta === 0) delta = 1;\\n\\n      if (i % delta === 0) {\\n        alpha -= alpha / alphadec;\\n        radius -= radius / radiusdec;\\n        rad = radius >> radiusbiasshift;\\n\\n        if (rad <= 1) rad = 0;\\n\\n        for (j = 0; j < rad; j++) radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad));\\n      }\\n    }\\n  };\\n\\n\\t/*\\n\\t ** Search for BGR values 0..255 (after net is unbiased) and return colour\\n\\t * index\\n\\t * ----------------------------------------------------------------------------\\n\\t */\\n\\n  var map = exports.map = function map(b, g, r) {\\n\\n    var i;\\n    var j;\\n    var dist;\\n    var a;\\n    var bestd;\\n    var p;\\n    var best;\\n\\n    bestd = 1000; /* biggest possible dist is 256*3 */\\n    best = -1;\\n    i = netindex[g]; /* index on g */\\n    j = i - 1; /* start at netindex[g] and work outwards */\\n\\n    while ((i < netsize) || (j >= 0)) {\\n\\n      if (i < netsize) {\\n        p = network[i];\\n        dist = p[1] - g; /* inx key */\\n\\n        if (dist >= bestd) i = netsize; /* stop iter */\\n\\n        else {\\n\\n          i++;\\n          if (dist < 0) dist = -dist;\\n          a = p[0] - b;\\n          if (a < 0) a = -a;\\n          dist += a;\\n\\n          if (dist < bestd) {\\n            a = p[2] - r;\\n            if (a < 0) a = -a;\\n            dist += a;\\n\\n            if (dist < bestd) {\\n              bestd = dist;\\n              best = p[3];\\n            }\\n          }\\n        }\\n      }\\n\\n      if (j >= 0) {\\n\\n        p = network[j];\\n        dist = g - p[1]; /* inx key - reverse dif */\\n\\n        if (dist >= bestd) j = -1; /* stop iter */\\n\\n        else {\\n\\n          j--;\\n          if (dist < 0) dist = -dist;\\n          a = p[0] - b;\\n          if (a < 0) a = -a;\\n          dist += a;\\n\\n          if (dist < bestd) {\\n            a = p[2] - r;\\n            if (a < 0) a = -a;\\n            dist += a;\\n            if (dist < bestd) {\\n              bestd = dist;\\n              best = p[3];\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    return (best);\\n  };\\n\\n  var process = exports.process = function process() {\\n    learn();\\n    unbiasnet();\\n    inxbuild();\\n    return colorMap();\\n  };\\n\\n\\t/*\\n\\t * Unbias network to give byte values 0..255 and record position i to prepare\\n\\t * for sort\\n\\t * -----------------------------------------------------------------------------------\\n\\t */\\n\\n  var unbiasnet = function unbiasnet() {\\n\\n    var i;\\n    var j;\\n\\n    for (i = 0; i < netsize; i++) {\\n      network[i][0] >>= netbiasshift;\\n      network[i][1] >>= netbiasshift;\\n      network[i][2] >>= netbiasshift;\\n      network[i][3] = i; /* record colour no */\\n    }\\n  };\\n\\n\\t/*\\n\\t * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in\\n\\t * radpower[|i-j|]\\n\\t * ---------------------------------------------------------------------------------\\n\\t */\\n\\n  var alterneigh = function alterneigh(rad, i, b, g, r) {\\n\\n    var j;\\n    var k;\\n    var lo;\\n    var hi;\\n    var a;\\n    var m;\\n    var p;\\n\\n    lo = i - rad;\\n    if (lo < -1) lo = -1;\\n\\n    hi = i + rad;\\n    if (hi > netsize) hi = netsize;\\n\\n    j = i + 1;\\n    k = i - 1;\\n    m = 1;\\n\\n    while ((j < hi) || (k > lo)) {\\n      a = radpower[m++];\\n\\n      if (j < hi) {\\n        p = network[j++];\\n\\n        try {\\n          p[0] -= (a * (p[0] - b)) / alpharadbias;\\n          p[1] -= (a * (p[1] - g)) / alpharadbias;\\n          p[2] -= (a * (p[2] - r)) / alpharadbias;\\n        } catch (e) { } // prevents 1.3 miscompilation\\n      }\\n\\n      if (k > lo) {\\n        p = network[k--];\\n\\n        try {\\n          p[0] -= (a * (p[0] - b)) / alpharadbias;\\n          p[1] -= (a * (p[1] - g)) / alpharadbias;\\n          p[2] -= (a * (p[2] - r)) / alpharadbias;\\n        } catch (e) { }\\n      }\\n    }\\n  };\\n\\n\\t/*\\n\\t * Move neuron i towards biased (b,g,r) by factor alpha\\n\\t * ----------------------------------------------------\\n\\t */\\n\\n  var altersingle = function altersingle(alpha, i, b, g, r) {\\n\\n    /* alter hit neuron */\\n    var n = network[i];\\n    n[0] -= (alpha * (n[0] - b)) / initalpha;\\n    n[1] -= (alpha * (n[1] - g)) / initalpha;\\n    n[2] -= (alpha * (n[2] - r)) / initalpha;\\n  };\\n\\n\\t/*\\n\\t * Search for biased BGR values ----------------------------\\n\\t */\\n\\n  var contest = function contest(b, g, r) {\\n\\n    /* finds closest neuron (min dist) and updates freq */\\n    /* finds best neuron (min dist-bias) and returns position */\\n    /* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\\n    /* bias[i] = gamma*((1/netsize)-freq[i]) */\\n\\n    var i;\\n    var dist;\\n    var a;\\n    var biasdist;\\n    var betafreq;\\n    var bestpos;\\n    var bestbiaspos;\\n    var bestd;\\n    var bestbiasd;\\n    var n;\\n\\n    bestd = ~(1 << 31);\\n    bestbiasd = bestd;\\n    bestpos = -1;\\n    bestbiaspos = bestpos;\\n\\n    for (i = 0; i < netsize; i++) {\\n      n = network[i];\\n      dist = n[0] - b;\\n      if (dist < 0) dist = -dist;\\n      a = n[1] - g;\\n      if (a < 0) a = -a;\\n      dist += a;\\n      a = n[2] - r;\\n      if (a < 0) a = -a;\\n      dist += a;\\n\\n      if (dist < bestd) {\\n        bestd = dist;\\n        bestpos = i;\\n      }\\n\\n      biasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\\n\\n      if (biasdist < bestbiasd) {\\n        bestbiasd = biasdist;\\n        bestbiaspos = i;\\n      }\\n\\n      betafreq = (freq[i] >> betashift);\\n      freq[i] -= betafreq;\\n      bias[i] += (betafreq << gammashift);\\n    }\\n\\n    freq[bestpos] += beta;\\n    bias[bestpos] -= betagamma;\\n    return (bestbiaspos);\\n  };\\n\\n  NeuQuant.apply(this, arguments);\\n  return exports;\\n};\\n\",\"function areArraysEqual(arr1, arr2) {\\n  if (arr1.length !== arr2.length) {\\n    return false;\\n  }\\n  for (let i = 0; i < arr1.length; i += 1) {\\n    if (arr1[i] !== arr2[i]) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\nfunction getRandomInt(min, max) {\\n  return Math.floor(Math.random() * (max - min + 1)) + min;\\n}\\n\\nmodule.exports.areArraysEqual = areArraysEqual;\\nmodule.exports.getRandomInt = getRandomInt;\\n\"]}","code":"!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=2)}([function(e,t,n){},,function(e,t,n){\"use strict\";n.r(t);n(0),n(3),n(4),n(5),n(6),n(7),n(8);const r=document.getElementById(\"canvas\"),i=document.querySelector(\".mainColor\"),o=r.getContext(\"2d\"),c=\"lightgray\";o.fillStyle=c,o.fillRect(0,0,r.width,r.height);const s=document.querySelector(\".main__frames\"),a=document.querySelector(\".addNewFrame\"),l=[];let u=1;const d=JSON.parse(localStorage.getItem(\"stateObject\")),f={};function h(){const e=r.toDataURL(),t=new Image;t.src=e,l[u-1]?l[u-1]=t:l.push(t),s.children[u-1].style.backgroundImage=`url(${e})`}function m(e){h();const t=l[e-1];u=e,o.clearRect(0,0,r.width,r.height),o.drawImage(t,0,0)}function y(){h();const e=document.querySelector(\".frame\").cloneNode(!0);e.classList.contains(\"firstFrame\")&&e.classList.remove(\"firstFrame\"),e.children[0].innerText=Number(s.children[s.children.length-2].children[0].innerText)+1,s.insertBefore(e,s.children[s.children.length-1]),u=s.children.length-1,o.clearRect(0,0,r.width,r.height),o.fillStyle=c,o.fillRect(0,0,r.width,r.height),m(u)}function g(e){const t=document.querySelectorAll(\".frame\")[e-1].cloneNode(!0);t.classList.contains(\"firstFrame\")&&t.classList.remove(\"firstFrame\"),o.clearRect(0,0,r.width,r.height),t.children[0].innerText=s.children.length,s.insertBefore(t,s.children[s.children.length-1]),u=s.children.length-1,o.drawImage(l[e-1],0,0),h()}function v(e){if(s.children.length>2){e===u?l.length===u?m(u-1):l.length>u&&(m(u+1),u-=1):e<u&&(u-=1),s.children[e-1].remove(),l.splice(e-1,1);for(let e=0;e<s.children.length-1;e+=1)s.children[e].classList.contains(\"frame\")&&(s.children[e].children[0].innerText=e+1)}}a.addEventListener(\"click\",y),s.addEventListener(\"click\",function(e){e.target.classList.contains(\"numberOfFrame\")?m(Number(e.target.innerText)):e.target.classList.contains(\"frame\")?m(Number(e.target.children[0].innerText)):e.target.classList.contains(\"duplicateIcon\")?g(e.target.parentElement.children[0].innerText):e.target.classList.contains(\"deleteIcon\")&&v(e.target.parentElement.children[0].innerText)}),h();const w=document.querySelector(\".FPS\");let p=null;const L=document.querySelector(\".showAnimation\");let b=0;function k(e,t){L.innerHTML=\"\",e[b].classList.contains(\"AnimationImg\")||e[b].classList.add(\"AnimationImg\"),L.appendChild(e[b]),b===e.length-1?areArraysEqual(e,l)&&t===w.value?b=0:(b=0,E()):b+=1}function E(){const e=l.slice();let t=w.value;t<1?t=1:t>24&&(t=24),clearInterval(p),p=window.setInterval(k,1e3/t,e,t)}E();const S=document.querySelector(\".FullscreenButton\");S.addEventListener(\"click\",function(){\"\"!==L.innerHTML&&L.requestFullscreen()});const B=document.querySelector(\".size-picker-container\");let I=1,P=B.children[0];B.addEventListener(\"click\",function(e){e.target.parentElement===B&&(I=e.target.attributes[1].value,P.classList.remove(\"selected\"),(P=e.target).classList.add(\"selected\"))});const R=document.querySelector(\".main__pallete__tool-picker\"),T=[];let F,K=!1,x=0,q=0,M=r.clientWidth/r.width;function A(e){x=e.offsetX,q=e.offsetY}function C(e){A(e),K=!0}function N(e){!0===K&&(j(o,x,q,e.offsetX,e.offsetY),A(e))}function O(e){!0===K&&(j(o,x,q,e.offsetX,e.offsetY),x=0,q=0,K=!1)}function j(e,t,n,r,o){e.beginPath(),e.strokeStyle=i.value,e.lineWidth=I,e.moveTo(t/M,n/M),e.lineTo(r/M,o/M),e.stroke(),e.closePath()}function W(){r.addEventListener(\"mousedown\",C),r.addEventListener(\"mousemove\",N),r.addEventListener(\"mouseup\",O),T.push([\"mousedown\",C]),T.push([\"mousemove\",N]),T.push([\"mouseup\",O])}function X(){o.fillStyle=i.value,o.fillRect(0,0,r.width,r.height)}function Y(e){A(e),K=!0}function _(e){!0===K&&(D(o,x,q,e.offsetX,e.offsetY),A(e))}function z(e){!0===K&&(D(o,x,q,e.offsetX,e.offsetY),x=0,q=0,K=!1)}function D(e,t,n,r,i){e.beginPath(),e.strokeStyle=c,e.lineWidth=10*I,e.moveTo(t/M,n/M),e.lineTo(r/M,i/M),e.stroke(),e.closePath()}function U(){r.addEventListener(\"mousedown\",Y),r.addEventListener(\"mousemove\",_),r.addEventListener(\"mouseup\",z),T.push([\"mousedown\",Y]),T.push([\"mousemove\",_]),T.push([\"mouseup\",z])}function G(e){A(e),K=!0}function $(e){!0===K&&(j(o,x,q,e.offsetX,e.offsetY),K=!1)}function Q(){r.addEventListener(\"mousedown\",G),r.addEventListener(\"mouseup\",$),T.push([\"mousedown\",G]),T.push([\"mouseup\",$])}function H(e){A(e),K=!0}function J(e){!0===K&&(!function(e,t,n,r,o){const c=r-t,s=o-n;e.beginPath(),e.strokeStyle=i.value,e.lineWidth=I,e.strokeRect(parseInt(t/M,10),parseInt(n/M,10),parseInt(c/M,10),parseInt(s/M,10)),e.closePath()}(o,x,q,e.offsetX,e.offsetY),K=!1)}function Z(e){!0===K&&(!function(e,t,n,r,o){const c=r-t,s=o-n;e.fillStyle=i.value,e.fillRect(parseInt(t/M,10),parseInt(n/M,10),parseInt(c/M,10),parseInt(s/M,10))}(o,x,q,e.offsetX,e.offsetY),K=!1)}function V(){r.addEventListener(\"mousedown\",H),r.addEventListener(\"mouseup\",J),T.push([\"mousedown\",H]),T.push([\"mouseup\",J])}function ee(){r.addEventListener(\"mousedown\",H),r.addEventListener(\"mouseup\",Z),T.push([\"mousedown\",H]),T.push([\"mouseup\",Z])}function te(e){A(e),K=!0}function ne(e){!0===K&&(!function(e,t,n,r,o){let c;r<t&&(c=r,r=t,t=c);o<n&&(c=o,o=n,n=c);e.strokeStyle=i.value,e.lineWidth=I,e.beginPath(),e.arc((r+t)/2/M,(o+n)/2/M,(r-t)/2/M,0,2*Math.PI),e.stroke(),e.closePath()}(o,x,q,e.offsetX,e.offsetY),K=!1)}function re(e){!0===K&&(!function(e,t,n,r,o){let c;r<t&&(c=r,r=t,t=c);o<n&&(c=o,o=n,n=c);e.beginPath(),e.arc((r+t)/2/M,(o+n)/2/M,(r-t)/2/M,0,2*Math.PI),e.fillStyle=i.value,e.fill(),e.closePath()}(o,x,q,e.offsetX,e.offsetY),K=!1)}function ie(){r.addEventListener(\"mousedown\",te),r.addEventListener(\"mouseup\",ne),T.push([\"mousedown\",te]),T.push([\"mouseup\",ne])}function oe(){r.addEventListener(\"mousedown\",te),r.addEventListener(\"mouseup\",re),T.push([\"mousedown\",te]),T.push([\"mouseup\",re])}function ce(e){!0===K&&(!function(e,t,n,r,o){let c=!1;t<r&&(c=!0),e.strokeStyle=i.value,e.lineWidth=I,e.beginPath();const s=Math.abs(o-n)/2,a=s*s/(Math.sqrt((r-t)**2+(o-n)**2)/2),l=Math.sqrt(s*s-a*a),u=Math.acos(l/s);e.arc((r+t)/2/M,(o+n)/2/M,s/M,u,Math.PI+u,c),e.stroke(),e.closePath()}(o,x,q,e.offsetX,e.offsetY),K=!1)}function se(){r.addEventListener(\"mousedown\",te),r.addEventListener(\"mouseup\",ce),T.push([\"mousedown\",te]),T.push([\"mouseup\",ce])}function ae(){o.fillStyle=c,o.fillRect(0,0,r.width,r.height)}function le(){for(let e=20*I;e>0;e-=1){const e=20*I,t=getRandomInt(-e,e),n=getRandomInt(-e,e);o.fillStyle=i.value,o.fillRect((x+t)/M,(q+n)/M,1,1)}}function ue(e){A(e),K=!0,o.lineCap=\"round\",o.lineJoin=\"round\",F=setInterval(le,50)}function de(e){!0===K&&A(e)}function fe(){!0===K&&(clearInterval(F),K=!1)}function he(){r.addEventListener(\"mousedown\",ue),r.addEventListener(\"mousemove\",de),r.addEventListener(\"mouseup\",fe),T.push([\"mousedown\",ue]),T.push([\"mousemove\",de]),T.push([\"mouseup\",fe])}R.addEventListener(\"click\",function(e){if(e.target.parentElement===R)switch(T.forEach(e=>{r.removeEventListener(e[0],e[1])}),e.target.classList[1]){case\"pen\":W();break;case\"fillAllPixels\":X();break;case\"eraser\":U();break;case\"stroke\":Q();break;case\"rectange\":V();break;case\"filledRectange\":ee();break;case\"circle\":ie();break;case\"filledCircle\":oe();break;case\"halfCircle\":se();break;case\"clear\":ae();break;case\"spray\":he()}});const me=document.querySelector(\".canvas-size-container\");let ye=32,ge=me.children[0];function ve(e){ye=e,r.width=ye,r.height=ye,M=r.clientWidth/r.width,o.fillStyle=c,o.fillRect(0,0,r.width,r.height),o.drawImage(l[u-1],0,0),h(),function(){o.fillStyle=c;const e=u;for(let e=0;e<l.length;e+=1){const t=l[e];u=e+1,o.fillRect(0,0,r.width,r.height),o.drawImage(t,0,0),h()}m(e)}(),o.fillRect(0,0,r.width,r.height)}document.onresize=function(){M=r.clientWidth/r.width},me.addEventListener(\"click\",function(e){e.target.parentElement===me&&(ge.classList.remove(\"selected\"),(ge=e.target).classList.add(\"selected\")),ve(e.target.attributes[1].value)}),window.addEventListener(\"unload\",function(){f.imgs=[],l.forEach(e=>{f.imgs.push(e.src)}),f.penSize=String(I),f.currentCanvasSize=String(ye),localStorage.removeItem(\"stateObject\"),localStorage.setItem(\"stateObject\",JSON.stringify(f))}),window.addEventListener(\"load\",function(){switch(P.classList.remove(\"selected\"),ge.classList.remove(\"selected\"),d.penSize){case\"1\":P=B.children[0],I=1,P.classList.add(\"selected\");break;case\"2\":P=B.children[1],I=2,P.classList.add(\"selected\");break;case\"3\":P=B.children[2],I=3,P.classList.add(\"selected\");break;case\"4\":P=B.children[3],I=4,P.classList.add(\"selected\");break;default:P=B.children[0],I=1,P.classList.add(\"selected\")}switch(d.currentCanvasSize){case\"32\":(ge=me.children[0]).classList.add(\"selected\");break;case\"64\":(ge=me.children[1]).classList.add(\"selected\"),r.width=64,r.height=64;break;case\"128\":(ge=me.children[2]).classList.add(\"selected\"),r.width=128,r.height=128;break;default:(ge=me.children[0]).classList.add(\"selected\")}M=r.clientWidth/r.width,o.fillStyle=c,o.fillRect(0,0,r.width,r.height)});const we=document.querySelector(\".coords\");r.addEventListener(\"mousemove\",function(e){we.innerText=`[${ye}x${ye}] ${parseInt(e.offsetX/M,10)}:${parseInt(e.offsetY/M,10)}`});const pe=document.querySelector(\".downloadButton\");pe.addEventListener(\"click\",function(){const e=new GIFEncoder;e.setRepeat(0),e.setDelay(1e3/w.value),e.start();const t=document.createElement(\"canvas\");t.width=ye,t.height=ye;const n=t.getContext(\"2d\");for(let t=0;t<l.length;t+=1)n.clearRect(0,0,r.width,r.height),n.drawImage(l[t],0,0),e.addFrame(n);e.finish(),e.download(\"download.gif\")}),document.onkeyup=function(e){\"KeyP\"===e.code?W():e.shiftKey&&\"KeyN\"===e.code?g(u):e.shiftKey&&\"KeyB\"===e.code?v(u):e.shiftKey&&\"Equal\"===e.code?32==ye?me.children[1].click():64==ye&&me.children[2].click():e.shiftKey&&\"Minus\"===e.code?64==ye?me.children[0].click():128==ye&&me.children[1].click():\"BracketRight\"===e.code?1==I?B.children[1].click():2==I?B.children[2].click():3==I&&B.children[3].click():\"BracketLeft\"===e.code?2==I?B.children[0].click():3==I?B.children[1].click():4==I&&B.children[2].click():e.ctrlKey&&\"KeyS\"===e.code?pe.click():e.ctrlKey&&\"KeyF\"===e.code?S.click():\"ArrowUp\"===e.code&&u<s.children.length-1?m(u+1):\"ArrowDown\"===e.code&&u>1?m(u-1):\"KeyF\"===e.code?X():\"KeyE\"===e.code?U():\"KeyS\"===e.code?he():\"KeyT\"===e.code?Q():\"KeyR\"===e.code?V():\"KeyG\"===e.code?ee():\"KeyA\"===e.code?ie():\"KeyD\"===e.code?oe():\"KeyH\"===e.code?se():\"KeyC\"===e.code?ae():\"KeyN\"===e.code&&y()}},function(e,t,n){},function(e,t){GIFEncoder=function(){for(var e=0,t={};e<256;e++)t[e]=String.fromCharCode(e);function n(){this.bin=[]}n.prototype.getData=function(){for(var e=\"\",n=this.bin.length,r=0;r<n;r++)e+=t[this.bin[r]];return e},n.prototype.writeByte=function(e){this.bin.push(e)},n.prototype.writeUTFBytes=function(e){for(var t=e.length,n=0;n<t;n++)this.writeByte(e.charCodeAt(n))},n.prototype.writeBytes=function(e,t,n){for(var r=n||e.length,i=t||0;i<r;i++)this.writeByte(e[i])};var r,i,o,c,s,a,l,u,d,f={},h=null,m=-1,y=0,g=!1,v=[],w=7,p=-1,L=!1,b=!0,k=!1,E=10,S=\"Generated by jsgif (https://github.com/antimatter15/jsgif/)\",B=(f.setDelay=function(e){y=Math.round(e/10)},f.setDispose=function(e){e>=0&&(p=e)},f.setRepeat=function(e){e>=0&&(m=e)},f.setTransparent=function(e){h=e},f.setComment=function(e){S=e},f.addFrame=function(e,t){if(null===e||!g||null===c)throw new Error(\"Please call start method before calling addFrame\");var n=!0;try{t?e instanceof ImageData?(s=e.data,sizeset&&r==e.width&&i==e.height||I(e.width,e.height)):e instanceof Uint8ClampedArray?e.length==r*i*4?s=e:(console.log(\"Please set the correct size: ImageData length mismatch\"),n=!1):(console.log(\"Please provide correct input\"),n=!1):(s=e.getImageData(0,0,e.canvas.width,e.canvas.height).data,k||I(e.canvas.width,e.canvas.height)),T(),P(),b&&(q(),A(),m>=0&&M()),F(),\"\"!==S&&K(),x(),b||A(),N(),b=!1}catch(e){n=!1}return n},f.download=function(e){if(null===c||0==L)console.log(\"Please call start method and add frames and call finish method before calling download\");else{e=void 0!==e?e.endsWith(\".gif\")?e:e+\".gif\":\"download.gif\";var t=document.createElement(\"a\");t.download=e,t.href=URL.createObjectURL(new Blob([new Uint8Array(c.bin)],{type:\"image/gif\"})),t.click()}},f.finish=function(){if(!g)return!1;var e=!0;g=!1;try{c.writeByte(59),L=!0}catch(t){e=!1}return e},function(){o=0,s=null,a=null,l=null,d=null,L=!1,b=!0}),I=(f.setFrameRate=function(e){15!=e&&(y=Math.round(100/e))},f.setQuality=function(e){e<1&&(e=1),E=e},f.setSize=function(e,t){g&&!b||((r=e)<1&&(r=320),(i=t)<1&&(i=240),k=!0)}),P=(f.start=function(){B();var e=!0;L=!1,c=new n;try{c.writeUTFBytes(\"GIF89a\")}catch(t){e=!1}return g=e},f.cont=function(){B();return L=!1,c=new n,g=!0},function(){var e=a.length,t=e/3;l=[];var n=new NeuQuant(a,e,E);d=n.process();for(var r=0,i=0;i<t;i++){var c=n.map(255&a[r++],255&a[r++],255&a[r++]);v[c]=!0,l[i]=c}a=null,u=8,w=7,null!==h&&(o=R(h))}),R=function(e){if(null===d)return-1;for(var t=(16711680&e)>>16,n=(65280&e)>>8,r=255&e,i=0,o=16777216,c=d.length,s=0;s<c;){var a=t-(255&d[s++]),l=n-(255&d[s++]),u=r-(255&d[s]),f=a*a+l*l+u*u,h=s/3;v[h]&&f<o&&(o=f,i=h),s++}return i},T=function(){var e=r,t=i;a=[];for(var n=s,o=0,c=0;c<t;c++)for(var l=0;l<e;l++){var u=c*e*4+4*l;a[o++]=n[u],a[o++]=n[u+1],a[o++]=n[u+2]}},F=function(){var e,t;c.writeByte(33),c.writeByte(249),c.writeByte(4),null===h?(e=0,t=0):(e=1,t=2),p>=0&&(t=7&p),t<<=2,c.writeByte(0|t|e),C(y),c.writeByte(o),c.writeByte(0)},K=function(){c.writeByte(33),c.writeByte(254),c.writeByte(S.length),c.writeUTFBytes(S),c.writeByte(0)},x=function(){c.writeByte(44),C(0),C(0),C(r),C(i),b?c.writeByte(0):c.writeByte(128|w)},q=function(){C(r),C(i),c.writeByte(240|w),c.writeByte(0),c.writeByte(0)},M=function(){c.writeByte(33),c.writeByte(255),c.writeByte(11),c.writeUTFBytes(\"NETSCAPE2.0\"),c.writeByte(3),c.writeByte(1),C(m),c.writeByte(0)},A=function(){c.writeBytes(d);for(var e=768-d.length,t=0;t<e;t++)c.writeByte(0)},C=function(e){c.writeByte(255&e),c.writeByte(e>>8&255)},N=function(){new LZWEncoder(r,i,l,u).encode(c)};f.stream=function(){return c},f.setProperties=function(e,t){g=e,b=t};return f}},function(e,t){LZWEncoder=function(){var e,t,n,r,i,o,c,s,a,l,u,d,f={},h=[],m=[],y=0,g=!1,v=0,w=0,p=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],L=[],b=f.LZWEncoder=function(i,o,c,s){e=i,t=o,n=c,r=Math.max(2,s)},k=function(e,t){L[d++]=e,d>=254&&I(t)},E=function(e){S(5003),y=l+2,g=!0,T(l,e)},S=function(e){for(var t=0;t<e;++t)h[t]=-1},B=f.compress=function(e,t){var n,r,i,o,f,v;for(g=!1,s=P(c=a=e),u=(l=1<<e-1)+1,y=l+2,d=0,o=R(),v=0,n=5003;n<65536;n*=2)++v;v=8-v,S(5003),T(l,t);e:for(;-1!=(i=R());)if(n=(i<<12)+o,h[r=i<<v^o]!=n){if(h[r]>=0){f=5003-r,0===r&&(f=1);do{if((r-=f)<0&&(r+=5003),h[r]==n){o=m[r];continue e}}while(h[r]>=0)}T(o,t),o=i,y<4096?(m[r]=y++,h[r]=n):E(t)}else o=m[r];T(o,t),T(u,t)},I=(f.encode=function(n){n.writeByte(r),i=e*t,o=0,B(r+1,n),n.writeByte(0)},function(e){d>0&&(e.writeByte(d),e.writeBytes(L,0,d),d=0)}),P=function(e){return(1<<e)-1},R=function(){return 0===i?-1:(--i,255&n[o++])},T=function(e,t){for(v&=p[w],w>0?v|=e<<w:v=e,w+=c;w>=8;)k(255&v,t),v>>=8,w-=8;if((y>s||g)&&(g?(s=P(c=a),g=!1):s=12==++c?4096:P(c)),e==u){for(;w>0;)k(255&v,t),v>>=8,w-=8;I(t)}};return b.apply(this,arguments),f}},function(e,t){NeuQuant=function(){var e,t,n,r,i,o={},c=[],s=[],a=[],l=[],u=o.NeuQuant=function(e,o,c){var l,u;for(t=e,n=o,r=c,i=new Array(256),l=0;l<256;l++)i[l]=new Array(4),(u=i[l])[0]=u[1]=u[2]=(l<<12)/256,a[l]=256,s[l]=0},d=(o.map=function(e,t,n){var r,o,s,a,l,u,d;for(l=1e3,d=-1,o=(r=c[t])-1;r<256||o>=0;)r<256&&((s=(u=i[r])[1]-t)>=l?r=256:(r++,s<0&&(s=-s),(a=u[0]-e)<0&&(a=-a),(s+=a)<l&&((a=u[2]-n)<0&&(a=-a),(s+=a)<l&&(l=s,d=u[3])))),o>=0&&((s=t-(u=i[o])[1])>=l?o=-1:(o--,s<0&&(s=-s),(a=u[0]-e)<0&&(a=-a),(s+=a)<l&&((a=u[2]-n)<0&&(a=-a),(s+=a)<l&&(l=s,d=u[3]))));return d},o.process=function(){return function(){var i,o,c,s,a,u,d,y,g,v,w,p,L,b;for(n<1509&&(r=1),e=30+(r-1)/3,p=t,L=0,b=n,v=(w=n/(3*r))/100|0,y=1024,(d=(u=2048)>>6)<=1&&(d=0),i=0;i<d;i++)l[i]=y*(256*(d*d-i*i)/(d*d));for(g=n<1509?3:n%499!=0?1497:n%491!=0?1473:n%487!=0?1461:1509,i=0;i<w;)if(c=(255&p[L+0])<<4,s=(255&p[L+1])<<4,a=(255&p[L+2])<<4,o=m(c,s,a),h(y,o,c,s,a),0!==d&&f(d,o,c,s,a),(L+=g)>=b&&(L-=n),0===v&&(v=1),++i%v==0)for(y-=y/e,(d=(u-=u/30)>>6)<=1&&(d=0),o=0;o<d;o++)l[o]=y*(256*(d*d-o*o)/(d*d))}(),d(),function(){var e,t,n,r,o,s,a,l;for(a=0,l=0,e=0;e<256;e++){for(n=e,r=(o=i[e])[1],t=e+1;t<256;t++)(s=i[t])[1]<r&&(n=t,r=s[1]);if(s=i[n],e!=n&&(t=s[0],s[0]=o[0],o[0]=t,t=s[1],s[1]=o[1],o[1]=t,t=s[2],s[2]=o[2],o[2]=t,t=s[3],s[3]=o[3],o[3]=t),r!=a){for(c[a]=l+e>>1,t=a+1;t<r;t++)c[t]=e;a=r,l=e}}for(c[a]=l+255>>1,t=a+1;t<256;t++)c[t]=255}(),function(){for(var e=[],t=new Array(256),n=0;n<256;n++)t[i[n][3]]=n;for(var r=0,o=0;o<256;o++){var c=t[o];e[r++]=i[c][0],e[r++]=i[c][1],e[r++]=i[c][2]}return e}()},function(){var e;for(e=0;e<256;e++)i[e][0]>>=4,i[e][1]>>=4,i[e][2]>>=4,i[e][3]=e}),f=function(e,t,n,r,o){var c,s,a,u,d,f,h;for((a=t-e)<-1&&(a=-1),(u=t+e)>256&&(u=256),c=t+1,s=t-1,f=1;c<u||s>a;){if(d=l[f++],c<u){h=i[c++];try{h[0]-=d*(h[0]-n)/(1<<18),h[1]-=d*(h[1]-r)/(1<<18),h[2]-=d*(h[2]-o)/(1<<18)}catch(e){}}if(s>a){h=i[s--];try{h[0]-=d*(h[0]-n)/(1<<18),h[1]-=d*(h[1]-r)/(1<<18),h[2]-=d*(h[2]-o)/(1<<18)}catch(e){}}}},h=function(e,t,n,r,o){var c=i[t];c[0]-=e*(c[0]-n)/1024,c[1]-=e*(c[1]-r)/1024,c[2]-=e*(c[2]-o)/1024},m=function(e,t,n){var r,o,c,l,u,d,f,h,m,y;for(m=h=~(1<<31),f=d=-1,r=0;r<256;r++)(o=(y=i[r])[0]-e)<0&&(o=-o),(c=y[1]-t)<0&&(c=-c),o+=c,(c=y[2]-n)<0&&(c=-c),(o+=c)<h&&(h=o,d=r),(l=o-(s[r]>>12))<m&&(m=l,f=r),u=a[r]>>10,a[r]-=u,s[r]+=u<<10;return a[d]+=64,s[d]-=65536,f};return u.apply(this,arguments),o}},function(e,t){},function(e,t){e.exports.areArraysEqual=function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n+=1)if(e[n]!==t[n])return!1;return!0},e.exports.getRandomInt=function(e,t){return Math.floor(Math.random()*(t-e+1))+e}}]);","extractedComments":[]}